/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// RemoteConfigGetAppConfigResponse struct for RemoteConfigGetAppConfigResponse
type RemoteConfigGetAppConfigResponse struct {
	// Config for the app
	Config map[string]interface{} `json:"config,omitempty"`
}

// NewRemoteConfigGetAppConfigResponse instantiates a new RemoteConfigGetAppConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteConfigGetAppConfigResponse() *RemoteConfigGetAppConfigResponse {
	this := RemoteConfigGetAppConfigResponse{}
	return &this
}

// NewRemoteConfigGetAppConfigResponseWithDefaults instantiates a new RemoteConfigGetAppConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteConfigGetAppConfigResponseWithDefaults() *RemoteConfigGetAppConfigResponse {
	this := RemoteConfigGetAppConfigResponse{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *RemoteConfigGetAppConfigResponse) GetConfig() map[string]interface{} {
	if o == nil || isNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteConfigGetAppConfigResponse) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *RemoteConfigGetAppConfigResponse) HasConfig() bool {
	if o != nil && !isNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *RemoteConfigGetAppConfigResponse) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o RemoteConfigGetAppConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteConfigGetAppConfigResponse struct {
	value *RemoteConfigGetAppConfigResponse
	isSet bool
}

func (v NullableRemoteConfigGetAppConfigResponse) Get() *RemoteConfigGetAppConfigResponse {
	return v.value
}

func (v *NullableRemoteConfigGetAppConfigResponse) Set(val *RemoteConfigGetAppConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteConfigGetAppConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteConfigGetAppConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteConfigGetAppConfigResponse(val *RemoteConfigGetAppConfigResponse) *NullableRemoteConfigGetAppConfigResponse {
	return &NullableRemoteConfigGetAppConfigResponse{value: val, isSet: true}
}

func (v NullableRemoteConfigGetAppConfigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteConfigGetAppConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
