/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// ConsumeItemRequest struct for ConsumeItemRequest
type ConsumeItemRequest struct {
	// Number of units to consume
	ConsumeCount *int32 `json:"consume_count,omitempty"`
}

// NewConsumeItemRequest instantiates a new ConsumeItemRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumeItemRequest() *ConsumeItemRequest {
	this := ConsumeItemRequest{}
	return &this
}

// NewConsumeItemRequestWithDefaults instantiates a new ConsumeItemRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumeItemRequestWithDefaults() *ConsumeItemRequest {
	this := ConsumeItemRequest{}
	return &this
}

// GetConsumeCount returns the ConsumeCount field value if set, zero value otherwise.
func (o *ConsumeItemRequest) GetConsumeCount() int32 {
	if o == nil || isNil(o.ConsumeCount) {
		var ret int32
		return ret
	}
	return *o.ConsumeCount
}

// GetConsumeCountOk returns a tuple with the ConsumeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumeItemRequest) GetConsumeCountOk() (*int32, bool) {
	if o == nil || isNil(o.ConsumeCount) {
		return nil, false
	}
	return o.ConsumeCount, true
}

// HasConsumeCount returns a boolean if a field has been set.
func (o *ConsumeItemRequest) HasConsumeCount() bool {
	if o != nil && !isNil(o.ConsumeCount) {
		return true
	}

	return false
}

// SetConsumeCount gets a reference to the given int32 and assigns it to the ConsumeCount field.
func (o *ConsumeItemRequest) SetConsumeCount(v int32) {
	o.ConsumeCount = &v
}

func (o ConsumeItemRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ConsumeCount) {
		toSerialize["consume_count"] = o.ConsumeCount
	}
	return json.Marshal(toSerialize)
}

type NullableConsumeItemRequest struct {
	value *ConsumeItemRequest
	isSet bool
}

func (v NullableConsumeItemRequest) Get() *ConsumeItemRequest {
	return v.value
}

func (v *NullableConsumeItemRequest) Set(val *ConsumeItemRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumeItemRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumeItemRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumeItemRequest(val *ConsumeItemRequest) *NullableConsumeItemRequest {
	return &NullableConsumeItemRequest{value: val, isSet: true}
}

func (v NullableConsumeItemRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumeItemRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
