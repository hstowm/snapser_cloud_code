/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// ReplaceBlobRequest struct for ReplaceBlobRequest
type ReplaceBlobRequest struct {
	// CAS value retrieved from the last operation
	Cas *string `json:"cas,omitempty"`
	// Whether the blob should be created if it doesn't exist
	Create *bool `json:"create,omitempty"`
	// Optional TTL for the blob
	Ttl *int64 `json:"ttl,omitempty"`
	// Blob value to be inserted
	Value string `json:"value"`
}

// NewReplaceBlobRequest instantiates a new ReplaceBlobRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceBlobRequest(value string) *ReplaceBlobRequest {
	this := ReplaceBlobRequest{}
	this.Value = value
	return &this
}

// NewReplaceBlobRequestWithDefaults instantiates a new ReplaceBlobRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceBlobRequestWithDefaults() *ReplaceBlobRequest {
	this := ReplaceBlobRequest{}
	return &this
}

// GetCas returns the Cas field value if set, zero value otherwise.
func (o *ReplaceBlobRequest) GetCas() string {
	if o == nil || isNil(o.Cas) {
		var ret string
		return ret
	}
	return *o.Cas
}

// GetCasOk returns a tuple with the Cas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceBlobRequest) GetCasOk() (*string, bool) {
	if o == nil || isNil(o.Cas) {
		return nil, false
	}
	return o.Cas, true
}

// HasCas returns a boolean if a field has been set.
func (o *ReplaceBlobRequest) HasCas() bool {
	if o != nil && !isNil(o.Cas) {
		return true
	}

	return false
}

// SetCas gets a reference to the given string and assigns it to the Cas field.
func (o *ReplaceBlobRequest) SetCas(v string) {
	o.Cas = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *ReplaceBlobRequest) GetCreate() bool {
	if o == nil || isNil(o.Create) {
		var ret bool
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceBlobRequest) GetCreateOk() (*bool, bool) {
	if o == nil || isNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *ReplaceBlobRequest) HasCreate() bool {
	if o != nil && !isNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given bool and assigns it to the Create field.
func (o *ReplaceBlobRequest) SetCreate(v bool) {
	o.Create = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *ReplaceBlobRequest) GetTtl() int64 {
	if o == nil || isNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceBlobRequest) GetTtlOk() (*int64, bool) {
	if o == nil || isNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *ReplaceBlobRequest) HasTtl() bool {
	if o != nil && !isNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *ReplaceBlobRequest) SetTtl(v int64) {
	o.Ttl = &v
}

// GetValue returns the Value field value
func (o *ReplaceBlobRequest) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ReplaceBlobRequest) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ReplaceBlobRequest) SetValue(v string) {
	o.Value = v
}

func (o ReplaceBlobRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Cas) {
		toSerialize["cas"] = o.Cas
	}
	if !isNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !isNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableReplaceBlobRequest struct {
	value *ReplaceBlobRequest
	isSet bool
}

func (v NullableReplaceBlobRequest) Get() *ReplaceBlobRequest {
	return v.value
}

func (v *NullableReplaceBlobRequest) Set(val *ReplaceBlobRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceBlobRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceBlobRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceBlobRequest(val *ReplaceBlobRequest) *NullableReplaceBlobRequest {
	return &NullableReplaceBlobRequest{value: val, isSet: true}
}

func (v NullableReplaceBlobRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceBlobRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
