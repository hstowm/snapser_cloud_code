/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// UpdateUserItemMetadataRequest struct for UpdateUserItemMetadataRequest
type UpdateUserItemMetadataRequest struct {
	// Metadata to be attached to user inventory item. Not be confused with metadata with catalog item
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewUpdateUserItemMetadataRequest instantiates a new UpdateUserItemMetadataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserItemMetadataRequest() *UpdateUserItemMetadataRequest {
	this := UpdateUserItemMetadataRequest{}
	return &this
}

// NewUpdateUserItemMetadataRequestWithDefaults instantiates a new UpdateUserItemMetadataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserItemMetadataRequestWithDefaults() *UpdateUserItemMetadataRequest {
	this := UpdateUserItemMetadataRequest{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *UpdateUserItemMetadataRequest) GetMetadata() map[string]interface{} {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserItemMetadataRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UpdateUserItemMetadataRequest) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *UpdateUserItemMetadataRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o UpdateUserItemMetadataRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateUserItemMetadataRequest struct {
	value *UpdateUserItemMetadataRequest
	isSet bool
}

func (v NullableUpdateUserItemMetadataRequest) Get() *UpdateUserItemMetadataRequest {
	return v.value
}

func (v *NullableUpdateUserItemMetadataRequest) Set(val *UpdateUserItemMetadataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserItemMetadataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserItemMetadataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserItemMetadataRequest(val *UpdateUserItemMetadataRequest) *NullableUpdateUserItemMetadataRequest {
	return &NullableUpdateUserItemMetadataRequest{value: val, isSet: true}
}

func (v NullableUpdateUserItemMetadataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserItemMetadataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
