/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// InventoryGetUserCurrenciesResponse struct for InventoryGetUserCurrenciesResponse
type InventoryGetUserCurrenciesResponse struct {
	// Map of currency name to balance
	Currencies *map[string]int32 `json:"currencies,omitempty"`
}

// NewInventoryGetUserCurrenciesResponse instantiates a new InventoryGetUserCurrenciesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryGetUserCurrenciesResponse() *InventoryGetUserCurrenciesResponse {
	this := InventoryGetUserCurrenciesResponse{}
	return &this
}

// NewInventoryGetUserCurrenciesResponseWithDefaults instantiates a new InventoryGetUserCurrenciesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryGetUserCurrenciesResponseWithDefaults() *InventoryGetUserCurrenciesResponse {
	this := InventoryGetUserCurrenciesResponse{}
	return &this
}

// GetCurrencies returns the Currencies field value if set, zero value otherwise.
func (o *InventoryGetUserCurrenciesResponse) GetCurrencies() map[string]int32 {
	if o == nil || isNil(o.Currencies) {
		var ret map[string]int32
		return ret
	}
	return *o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryGetUserCurrenciesResponse) GetCurrenciesOk() (*map[string]int32, bool) {
	if o == nil || isNil(o.Currencies) {
		return nil, false
	}
	return o.Currencies, true
}

// HasCurrencies returns a boolean if a field has been set.
func (o *InventoryGetUserCurrenciesResponse) HasCurrencies() bool {
	if o != nil && !isNil(o.Currencies) {
		return true
	}

	return false
}

// SetCurrencies gets a reference to the given map[string]int32 and assigns it to the Currencies field.
func (o *InventoryGetUserCurrenciesResponse) SetCurrencies(v map[string]int32) {
	o.Currencies = &v
}

func (o InventoryGetUserCurrenciesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Currencies) {
		toSerialize["currencies"] = o.Currencies
	}
	return json.Marshal(toSerialize)
}

type NullableInventoryGetUserCurrenciesResponse struct {
	value *InventoryGetUserCurrenciesResponse
	isSet bool
}

func (v NullableInventoryGetUserCurrenciesResponse) Get() *InventoryGetUserCurrenciesResponse {
	return v.value
}

func (v *NullableInventoryGetUserCurrenciesResponse) Set(val *InventoryGetUserCurrenciesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryGetUserCurrenciesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryGetUserCurrenciesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryGetUserCurrenciesResponse(val *InventoryGetUserCurrenciesResponse) *NullableInventoryGetUserCurrenciesResponse {
	return &NullableInventoryGetUserCurrenciesResponse{value: val, isSet: true}
}

func (v NullableInventoryGetUserCurrenciesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryGetUserCurrenciesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
