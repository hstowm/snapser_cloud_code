/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// StorageServiceApiService StorageServiceApi service
type StorageServiceApiService service

type ApiDeleteAppendBlobRequest struct {
	ctx        context.Context
	ApiService *StorageServiceApiService
	ownerId    string
	accessType string
	key        string
	token      *string
	cas        *string
}

// User session token
func (r ApiDeleteAppendBlobRequest) Token(token string) ApiDeleteAppendBlobRequest {
	r.token = &token
	return r
}

// Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed
func (r ApiDeleteAppendBlobRequest) Cas(cas string) ApiDeleteAppendBlobRequest {
	r.cas = &cas
	return r
}

func (r ApiDeleteAppendBlobRequest) Execute() (*StorageDeleteAppendBlobResponse, *http.Response, error) {
	return r.ApiService.DeleteAppendBlobExecute(r)
}

/*
DeleteAppendBlob Append Blobs

Deletes the append blob

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ownerId Append-blob owner's user ID
	@param accessType Access to the append-blob. (public/protected/private)
	@param key Append-blob key
	@return ApiDeleteAppendBlobRequest
*/
func (a *StorageServiceApiService) DeleteAppendBlob(ctx context.Context, ownerId string, accessType string, key string) ApiDeleteAppendBlobRequest {
	return ApiDeleteAppendBlobRequest{
		ApiService: a,
		ctx:        ctx,
		ownerId:    ownerId,
		accessType: accessType,
		key:        key,
	}
}

// Execute executes the request
//
//	@return	StorageDeleteAppendBlobResponse
func (a *StorageServiceApiService) DeleteAppendBlobExecute(r ApiDeleteAppendBlobRequest) (*StorageDeleteAppendBlobResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageDeleteAppendBlobResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageServiceApiService.DeleteAppendBlob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner_id"+"}", url.PathEscape(parameterToString(r.ownerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_type"+"}", url.PathEscape(parameterToString(r.accessType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	if r.cas != nil {
		localVarQueryParams.Add("cas", parameterToString(*r.cas, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteBlobRequest struct {
	ctx        context.Context
	ApiService *StorageServiceApiService
	ownerId    string
	accessType string
	key        string
	token      *string
	cas        *string
}

// User session token
func (r ApiDeleteBlobRequest) Token(token string) ApiDeleteBlobRequest {
	r.token = &token
	return r
}

// Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed
func (r ApiDeleteBlobRequest) Cas(cas string) ApiDeleteBlobRequest {
	r.cas = &cas
	return r
}

func (r ApiDeleteBlobRequest) Execute() (*StorageDeleteBlobResponse, *http.Response, error) {
	return r.ApiService.DeleteBlobExecute(r)
}

/*
DeleteBlob Blobs

Delete a blob

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ownerId Blob owner's user ID
	@param accessType Access to the blob. (public/protected/private)
	@param key Blob key
	@return ApiDeleteBlobRequest
*/
func (a *StorageServiceApiService) DeleteBlob(ctx context.Context, ownerId string, accessType string, key string) ApiDeleteBlobRequest {
	return ApiDeleteBlobRequest{
		ApiService: a,
		ctx:        ctx,
		ownerId:    ownerId,
		accessType: accessType,
		key:        key,
	}
}

// Execute executes the request
//
//	@return	StorageDeleteBlobResponse
func (a *StorageServiceApiService) DeleteBlobExecute(r ApiDeleteBlobRequest) (*StorageDeleteBlobResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageDeleteBlobResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageServiceApiService.DeleteBlob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/storage/owner/{owner_id}/{access_type}/blobs/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner_id"+"}", url.PathEscape(parameterToString(r.ownerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_type"+"}", url.PathEscape(parameterToString(r.accessType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	if r.cas != nil {
		localVarQueryParams.Add("cas", parameterToString(*r.cas, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAppendBlobRequest struct {
	ctx        context.Context
	ApiService *StorageServiceApiService
	ownerId    string
	accessType string
	key        string
	token      *string
}

// User session token
func (r ApiGetAppendBlobRequest) Token(token string) ApiGetAppendBlobRequest {
	r.token = &token
	return r
}

func (r ApiGetAppendBlobRequest) Execute() (*StorageGetAppendBlobResponse, *http.Response, error) {
	return r.ApiService.GetAppendBlobExecute(r)
}

/*
GetAppendBlob Append Blobs

Retrieve the value of an append blob

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ownerId Append-blob owner's user ID
	@param accessType Access to the append-blob. (public/protected/private)
	@param key Append-blob key
	@return ApiGetAppendBlobRequest
*/
func (a *StorageServiceApiService) GetAppendBlob(ctx context.Context, ownerId string, accessType string, key string) ApiGetAppendBlobRequest {
	return ApiGetAppendBlobRequest{
		ApiService: a,
		ctx:        ctx,
		ownerId:    ownerId,
		accessType: accessType,
		key:        key,
	}
}

// Execute executes the request
//
//	@return	StorageGetAppendBlobResponse
func (a *StorageServiceApiService) GetAppendBlobExecute(r ApiGetAppendBlobRequest) (*StorageGetAppendBlobResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageGetAppendBlobResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageServiceApiService.GetAppendBlob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner_id"+"}", url.PathEscape(parameterToString(r.ownerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_type"+"}", url.PathEscape(parameterToString(r.accessType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlobRequest struct {
	ctx        context.Context
	ApiService *StorageServiceApiService
	ownerId    string
	accessType string
	key        string
	token      *string
}

// User session token
func (r ApiGetBlobRequest) Token(token string) ApiGetBlobRequest {
	r.token = &token
	return r
}

func (r ApiGetBlobRequest) Execute() (*StorageGetBlobResponse, *http.Response, error) {
	return r.ApiService.GetBlobExecute(r)
}

/*
GetBlob Blobs

Retrieve the blob for the key

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ownerId Blob owner's user ID
	@param accessType Access to the blob. (public/protected/private)
	@param key Blob key
	@return ApiGetBlobRequest
*/
func (a *StorageServiceApiService) GetBlob(ctx context.Context, ownerId string, accessType string, key string) ApiGetBlobRequest {
	return ApiGetBlobRequest{
		ApiService: a,
		ctx:        ctx,
		ownerId:    ownerId,
		accessType: accessType,
		key:        key,
	}
}

// Execute executes the request
//
//	@return	StorageGetBlobResponse
func (a *StorageServiceApiService) GetBlobExecute(r ApiGetBlobRequest) (*StorageGetBlobResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageGetBlobResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageServiceApiService.GetBlob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/storage/owner/{owner_id}/{access_type}/blobs/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner_id"+"}", url.PathEscape(parameterToString(r.ownerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_type"+"}", url.PathEscape(parameterToString(r.accessType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCounterRequest struct {
	ctx        context.Context
	ApiService *StorageServiceApiService
	ownerId    string
	accessType string
	key        string
	token      *string
}

// User session token
func (r ApiGetCounterRequest) Token(token string) ApiGetCounterRequest {
	r.token = &token
	return r
}

func (r ApiGetCounterRequest) Execute() (*StorageGetCounterResponse, *http.Response, error) {
	return r.ApiService.GetCounterExecute(r)
}

/*
GetCounter Counters

Retrieve a counter value

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ownerId Counter owner's user ID
	@param accessType Access to the counter. (public/protected/private)
	@param key Counter key
	@return ApiGetCounterRequest
*/
func (a *StorageServiceApiService) GetCounter(ctx context.Context, ownerId string, accessType string, key string) ApiGetCounterRequest {
	return ApiGetCounterRequest{
		ApiService: a,
		ctx:        ctx,
		ownerId:    ownerId,
		accessType: accessType,
		key:        key,
	}
}

// Execute executes the request
//
//	@return	StorageGetCounterResponse
func (a *StorageServiceApiService) GetCounterExecute(r ApiGetCounterRequest) (*StorageGetCounterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageGetCounterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageServiceApiService.GetCounter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/storage/owner/{owner_id}/{access_type}/counters/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner_id"+"}", url.PathEscape(parameterToString(r.ownerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_type"+"}", url.PathEscape(parameterToString(r.accessType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIncrementCounterRequest struct {
	ctx        context.Context
	ApiService *StorageServiceApiService
	ownerId    string
	accessType string
	key        string
	token      *string
	body       *IncrementCounterRequest
}

// User session token
func (r ApiIncrementCounterRequest) Token(token string) ApiIncrementCounterRequest {
	r.token = &token
	return r
}

func (r ApiIncrementCounterRequest) Body(body IncrementCounterRequest) ApiIncrementCounterRequest {
	r.body = &body
	return r
}

func (r ApiIncrementCounterRequest) Execute() (*StorageIncrementCounterResponse, *http.Response, error) {
	return r.ApiService.IncrementCounterExecute(r)
}

/*
IncrementCounter Counters

Increment the counter

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ownerId Counter owner's user ID
	@param accessType Access to the counter. (public/protected/private)
	@param key Counter key
	@return ApiIncrementCounterRequest
*/
func (a *StorageServiceApiService) IncrementCounter(ctx context.Context, ownerId string, accessType string, key string) ApiIncrementCounterRequest {
	return ApiIncrementCounterRequest{
		ApiService: a,
		ctx:        ctx,
		ownerId:    ownerId,
		accessType: accessType,
		key:        key,
	}
}

// Execute executes the request
//
//	@return	StorageIncrementCounterResponse
func (a *StorageServiceApiService) IncrementCounterExecute(r ApiIncrementCounterRequest) (*StorageIncrementCounterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageIncrementCounterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageServiceApiService.IncrementCounter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/storage/owner/{owner_id}/{access_type}/counters/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner_id"+"}", url.PathEscape(parameterToString(r.ownerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_type"+"}", url.PathEscape(parameterToString(r.accessType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInsertBlobRequest struct {
	ctx        context.Context
	ApiService *StorageServiceApiService
	ownerId    string
	accessType string
	key        string
	token      *string
	body       *InsertBlobRequest
}

// User session token
func (r ApiInsertBlobRequest) Token(token string) ApiInsertBlobRequest {
	r.token = &token
	return r
}

func (r ApiInsertBlobRequest) Body(body InsertBlobRequest) ApiInsertBlobRequest {
	r.body = &body
	return r
}

func (r ApiInsertBlobRequest) Execute() (*StorageInsertBlobResponse, *http.Response, error) {
	return r.ApiService.InsertBlobExecute(r)
}

/*
InsertBlob Blobs

Inserts a blob. Will fail if the key already exists

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ownerId Blob owner's user ID
	@param accessType Access to the blob. (public/protected/private)
	@param key Blob key
	@return ApiInsertBlobRequest
*/
func (a *StorageServiceApiService) InsertBlob(ctx context.Context, ownerId string, accessType string, key string) ApiInsertBlobRequest {
	return ApiInsertBlobRequest{
		ApiService: a,
		ctx:        ctx,
		ownerId:    ownerId,
		accessType: accessType,
		key:        key,
	}
}

// Execute executes the request
//
//	@return	StorageInsertBlobResponse
func (a *StorageServiceApiService) InsertBlobExecute(r ApiInsertBlobRequest) (*StorageInsertBlobResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageInsertBlobResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageServiceApiService.InsertBlob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/storage/owner/{owner_id}/{access_type}/blobs/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner_id"+"}", url.PathEscape(parameterToString(r.ownerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_type"+"}", url.PathEscape(parameterToString(r.accessType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceBlobRequest struct {
	ctx        context.Context
	ApiService *StorageServiceApiService
	ownerId    string
	accessType string
	key        string
	token      *string
	body       *ReplaceBlobRequest
}

// User session token
func (r ApiReplaceBlobRequest) Token(token string) ApiReplaceBlobRequest {
	r.token = &token
	return r
}

func (r ApiReplaceBlobRequest) Body(body ReplaceBlobRequest) ApiReplaceBlobRequest {
	r.body = &body
	return r
}

func (r ApiReplaceBlobRequest) Execute() (*StorageReplaceBlobResponse, *http.Response, error) {
	return r.ApiService.ReplaceBlobExecute(r)
}

/*
ReplaceBlob Blobs

Replace a blob. Optionally insert if it doesn't exist

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ownerId Blob owner's user ID
	@param accessType Access to the blob. (public/protected/private)
	@param key Blob key
	@return ApiReplaceBlobRequest
*/
func (a *StorageServiceApiService) ReplaceBlob(ctx context.Context, ownerId string, accessType string, key string) ApiReplaceBlobRequest {
	return ApiReplaceBlobRequest{
		ApiService: a,
		ctx:        ctx,
		ownerId:    ownerId,
		accessType: accessType,
		key:        key,
	}
}

// Execute executes the request
//
//	@return	StorageReplaceBlobResponse
func (a *StorageServiceApiService) ReplaceBlobExecute(r ApiReplaceBlobRequest) (*StorageReplaceBlobResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageReplaceBlobResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageServiceApiService.ReplaceBlob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/storage/owner/{owner_id}/{access_type}/blobs/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner_id"+"}", url.PathEscape(parameterToString(r.ownerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_type"+"}", url.PathEscape(parameterToString(r.accessType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResetCounterRequest struct {
	ctx        context.Context
	ApiService *StorageServiceApiService
	ownerId    string
	accessType string
	key        string
	token      *string
}

// User session token
func (r ApiResetCounterRequest) Token(token string) ApiResetCounterRequest {
	r.token = &token
	return r
}

func (r ApiResetCounterRequest) Execute() (*StorageResetCounterResponse, *http.Response, error) {
	return r.ApiService.ResetCounterExecute(r)
}

/*
ResetCounter Counters

Reset a counter value to 0

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ownerId Counter owner's user ID
	@param accessType Access to the counter. (public/protected/private)
	@param key Counter key
	@return ApiResetCounterRequest
*/
func (a *StorageServiceApiService) ResetCounter(ctx context.Context, ownerId string, accessType string, key string) ApiResetCounterRequest {
	return ApiResetCounterRequest{
		ApiService: a,
		ctx:        ctx,
		ownerId:    ownerId,
		accessType: accessType,
		key:        key,
	}
}

// Execute executes the request
//
//	@return	StorageResetCounterResponse
func (a *StorageServiceApiService) ResetCounterExecute(r ApiResetCounterRequest) (*StorageResetCounterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageResetCounterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageServiceApiService.ResetCounter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/storage/owner/{owner_id}/{access_type}/counters/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner_id"+"}", url.PathEscape(parameterToString(r.ownerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_type"+"}", url.PathEscape(parameterToString(r.accessType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAppendBlobRequest struct {
	ctx        context.Context
	ApiService *StorageServiceApiService
	ownerId    string
	accessType string
	key        string
	token      *string
	body       *UpdateAppendBlobRequest
}

// User session token
func (r ApiUpdateAppendBlobRequest) Token(token string) ApiUpdateAppendBlobRequest {
	r.token = &token
	return r
}

func (r ApiUpdateAppendBlobRequest) Body(body UpdateAppendBlobRequest) ApiUpdateAppendBlobRequest {
	r.body = &body
	return r
}

func (r ApiUpdateAppendBlobRequest) Execute() (*StorageUpdateAppendBlobResponse, *http.Response, error) {
	return r.ApiService.UpdateAppendBlobExecute(r)
}

/*
UpdateAppendBlob Append Blobs

Apend to the existing blob. Create a new one if it doesn't exist

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ownerId Append-blob owner's user ID
	@param accessType Access to the append-blob. (public/protected/private)
	@param key Append-blob key
	@return ApiUpdateAppendBlobRequest
*/
func (a *StorageServiceApiService) UpdateAppendBlob(ctx context.Context, ownerId string, accessType string, key string) ApiUpdateAppendBlobRequest {
	return ApiUpdateAppendBlobRequest{
		ApiService: a,
		ctx:        ctx,
		ownerId:    ownerId,
		accessType: accessType,
		key:        key,
	}
}

// Execute executes the request
//
//	@return	StorageUpdateAppendBlobResponse
func (a *StorageServiceApiService) UpdateAppendBlobExecute(r ApiUpdateAppendBlobRequest) (*StorageUpdateAppendBlobResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageUpdateAppendBlobResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageServiceApiService.UpdateAppendBlob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner_id"+"}", url.PathEscape(parameterToString(r.ownerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_type"+"}", url.PathEscape(parameterToString(r.accessType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
