/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// InventoryUserInventory struct for InventoryUserInventory
type InventoryUserInventory struct {
	Items []InventoryUserInventoryItem `json:"items,omitempty"`
}

// NewInventoryUserInventory instantiates a new InventoryUserInventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryUserInventory() *InventoryUserInventory {
	this := InventoryUserInventory{}
	return &this
}

// NewInventoryUserInventoryWithDefaults instantiates a new InventoryUserInventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryUserInventoryWithDefaults() *InventoryUserInventory {
	this := InventoryUserInventory{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *InventoryUserInventory) GetItems() []InventoryUserInventoryItem {
	if o == nil || isNil(o.Items) {
		var ret []InventoryUserInventoryItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUserInventory) GetItemsOk() ([]InventoryUserInventoryItem, bool) {
	if o == nil || isNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *InventoryUserInventory) HasItems() bool {
	if o != nil && !isNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []InventoryUserInventoryItem and assigns it to the Items field.
func (o *InventoryUserInventory) SetItems(v []InventoryUserInventoryItem) {
	o.Items = v
}

func (o InventoryUserInventory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableInventoryUserInventory struct {
	value *InventoryUserInventory
	isSet bool
}

func (v NullableInventoryUserInventory) Get() *InventoryUserInventory {
	return v.value
}

func (v *NullableInventoryUserInventory) Set(val *InventoryUserInventory) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryUserInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryUserInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryUserInventory(val *InventoryUserInventory) *NullableInventoryUserInventory {
	return &NullableInventoryUserInventory{value: val, isSet: true}
}

func (v NullableInventoryUserInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryUserInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
