/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// InventoryUnlockContainerResponse struct for InventoryUnlockContainerResponse
type InventoryUnlockContainerResponse struct {
	// Items granted to the user
	GrantedItems []InventoryUserInventoryItem `json:"granted_items,omitempty"`
	// Virtual currency granted to the user
	GrantedVirtualCurrency *map[string]int32 `json:"granted_virtual_currency,omitempty"`
	// Number of remaining uses for the user inventory item
	RemainingUses *int32 `json:"remaining_uses,omitempty"`
}

// NewInventoryUnlockContainerResponse instantiates a new InventoryUnlockContainerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryUnlockContainerResponse() *InventoryUnlockContainerResponse {
	this := InventoryUnlockContainerResponse{}
	return &this
}

// NewInventoryUnlockContainerResponseWithDefaults instantiates a new InventoryUnlockContainerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryUnlockContainerResponseWithDefaults() *InventoryUnlockContainerResponse {
	this := InventoryUnlockContainerResponse{}
	return &this
}

// GetGrantedItems returns the GrantedItems field value if set, zero value otherwise.
func (o *InventoryUnlockContainerResponse) GetGrantedItems() []InventoryUserInventoryItem {
	if o == nil || isNil(o.GrantedItems) {
		var ret []InventoryUserInventoryItem
		return ret
	}
	return o.GrantedItems
}

// GetGrantedItemsOk returns a tuple with the GrantedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUnlockContainerResponse) GetGrantedItemsOk() ([]InventoryUserInventoryItem, bool) {
	if o == nil || isNil(o.GrantedItems) {
		return nil, false
	}
	return o.GrantedItems, true
}

// HasGrantedItems returns a boolean if a field has been set.
func (o *InventoryUnlockContainerResponse) HasGrantedItems() bool {
	if o != nil && !isNil(o.GrantedItems) {
		return true
	}

	return false
}

// SetGrantedItems gets a reference to the given []InventoryUserInventoryItem and assigns it to the GrantedItems field.
func (o *InventoryUnlockContainerResponse) SetGrantedItems(v []InventoryUserInventoryItem) {
	o.GrantedItems = v
}

// GetGrantedVirtualCurrency returns the GrantedVirtualCurrency field value if set, zero value otherwise.
func (o *InventoryUnlockContainerResponse) GetGrantedVirtualCurrency() map[string]int32 {
	if o == nil || isNil(o.GrantedVirtualCurrency) {
		var ret map[string]int32
		return ret
	}
	return *o.GrantedVirtualCurrency
}

// GetGrantedVirtualCurrencyOk returns a tuple with the GrantedVirtualCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUnlockContainerResponse) GetGrantedVirtualCurrencyOk() (*map[string]int32, bool) {
	if o == nil || isNil(o.GrantedVirtualCurrency) {
		return nil, false
	}
	return o.GrantedVirtualCurrency, true
}

// HasGrantedVirtualCurrency returns a boolean if a field has been set.
func (o *InventoryUnlockContainerResponse) HasGrantedVirtualCurrency() bool {
	if o != nil && !isNil(o.GrantedVirtualCurrency) {
		return true
	}

	return false
}

// SetGrantedVirtualCurrency gets a reference to the given map[string]int32 and assigns it to the GrantedVirtualCurrency field.
func (o *InventoryUnlockContainerResponse) SetGrantedVirtualCurrency(v map[string]int32) {
	o.GrantedVirtualCurrency = &v
}

// GetRemainingUses returns the RemainingUses field value if set, zero value otherwise.
func (o *InventoryUnlockContainerResponse) GetRemainingUses() int32 {
	if o == nil || isNil(o.RemainingUses) {
		var ret int32
		return ret
	}
	return *o.RemainingUses
}

// GetRemainingUsesOk returns a tuple with the RemainingUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUnlockContainerResponse) GetRemainingUsesOk() (*int32, bool) {
	if o == nil || isNil(o.RemainingUses) {
		return nil, false
	}
	return o.RemainingUses, true
}

// HasRemainingUses returns a boolean if a field has been set.
func (o *InventoryUnlockContainerResponse) HasRemainingUses() bool {
	if o != nil && !isNil(o.RemainingUses) {
		return true
	}

	return false
}

// SetRemainingUses gets a reference to the given int32 and assigns it to the RemainingUses field.
func (o *InventoryUnlockContainerResponse) SetRemainingUses(v int32) {
	o.RemainingUses = &v
}

func (o InventoryUnlockContainerResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.GrantedItems) {
		toSerialize["granted_items"] = o.GrantedItems
	}
	if !isNil(o.GrantedVirtualCurrency) {
		toSerialize["granted_virtual_currency"] = o.GrantedVirtualCurrency
	}
	if !isNil(o.RemainingUses) {
		toSerialize["remaining_uses"] = o.RemainingUses
	}
	return json.Marshal(toSerialize)
}

type NullableInventoryUnlockContainerResponse struct {
	value *InventoryUnlockContainerResponse
	isSet bool
}

func (v NullableInventoryUnlockContainerResponse) Get() *InventoryUnlockContainerResponse {
	return v.value
}

func (v *NullableInventoryUnlockContainerResponse) Set(val *InventoryUnlockContainerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryUnlockContainerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryUnlockContainerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryUnlockContainerResponse(val *InventoryUnlockContainerResponse) *NullableInventoryUnlockContainerResponse {
	return &NullableInventoryUnlockContainerResponse{value: val, isSet: true}
}

func (v NullableInventoryUnlockContainerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryUnlockContainerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
