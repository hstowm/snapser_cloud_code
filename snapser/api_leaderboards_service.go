/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// LeaderboardsServiceApiService LeaderboardsServiceApi service
type LeaderboardsServiceApiService service

type ApiGetScoresRequest struct {
	ctx             context.Context
	ApiService      *LeaderboardsServiceApiService
	leaderboardName *string
	range_          *string
	count           *int64
	token           *string
	userId          *string
	offset          *int32
}

// Name of the leaderboard
func (r ApiGetScoresRequest) LeaderboardName(leaderboardName string) ApiGetScoresRequest {
	r.leaderboardName = &leaderboardName
	return r
}

// Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified
func (r ApiGetScoresRequest) Range_(range_ string) ApiGetScoresRequest {
	r.range_ = &range_
	return r
}

// Number of rankings to be displayed
func (r ApiGetScoresRequest) Count(count int64) ApiGetScoresRequest {
	r.count = &count
	return r
}

// User session token
func (r ApiGetScoresRequest) Token(token string) ApiGetScoresRequest {
	r.token = &token
	return r
}

// Optional user ID for the user who&#39;s standing is requested
func (r ApiGetScoresRequest) UserId(userId string) ApiGetScoresRequest {
	r.userId = &userId
	return r
}

// For recurring leaderboards, the offset from the latest occurrence of the leaderboard
func (r ApiGetScoresRequest) Offset(offset int32) ApiGetScoresRequest {
	r.offset = &offset
	return r
}

func (r ApiGetScoresRequest) Execute() (*LeaderboardsGetScoresResponse, *http.Response, error) {
	return r.ApiService.GetScoresExecute(r)
}

/*
GetScores Get Scores

Gets the standings within a leaderboard

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetScoresRequest
*/
func (a *LeaderboardsServiceApiService) GetScores(ctx context.Context) ApiGetScoresRequest {
	return ApiGetScoresRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return	LeaderboardsGetScoresResponse
func (a *LeaderboardsServiceApiService) GetScoresExecute(r ApiGetScoresRequest) (*LeaderboardsGetScoresResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LeaderboardsGetScoresResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LeaderboardsServiceApiService.GetScores")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/leaderboards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.leaderboardName == nil {
		return localVarReturnValue, nil, reportError("leaderboardName is required and must be specified")
	}
	if r.range_ == nil {
		return localVarReturnValue, nil, reportError("range_ is required and must be specified")
	}
	if r.count == nil {
		return localVarReturnValue, nil, reportError("count is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	localVarQueryParams.Add("leaderboard_name", parameterToString(*r.leaderboardName, ""))
	if r.userId != nil {
		localVarQueryParams.Add("user_id", parameterToString(*r.userId, ""))
	}
	localVarQueryParams.Add("range", parameterToString(*r.range_, ""))
	localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIncrementScoreRequest struct {
	ctx             context.Context
	ApiService      *LeaderboardsServiceApiService
	leaderboardName string
	userId          string
	token           *string
	body            *IncrementScoreRequest
}

// User session token
func (r ApiIncrementScoreRequest) Token(token string) ApiIncrementScoreRequest {
	r.token = &token
	return r
}

func (r ApiIncrementScoreRequest) Body(body IncrementScoreRequest) ApiIncrementScoreRequest {
	r.body = &body
	return r
}

func (r ApiIncrementScoreRequest) Execute() (*LeaderboardsIncrementScoreResponse, *http.Response, error) {
	return r.ApiService.IncrementScoreExecute(r)
}

/*
IncrementScore Update Scores

Increments the score on the leaderboard for the logged in user (only 'counter' leaderboards)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param leaderboardName Name of the leaderboard
	@param userId User ID for the user who's score is being updated
	@return ApiIncrementScoreRequest
*/
func (a *LeaderboardsServiceApiService) IncrementScore(ctx context.Context, leaderboardName string, userId string) ApiIncrementScoreRequest {
	return ApiIncrementScoreRequest{
		ApiService:      a,
		ctx:             ctx,
		leaderboardName: leaderboardName,
		userId:          userId,
	}
}

// Execute executes the request
//
//	@return	LeaderboardsIncrementScoreResponse
func (a *LeaderboardsServiceApiService) IncrementScoreExecute(r ApiIncrementScoreRequest) (*LeaderboardsIncrementScoreResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LeaderboardsIncrementScoreResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LeaderboardsServiceApiService.IncrementScore")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/leaderboards/{leaderboard_name}/user/{user_id}/score"
	localVarPath = strings.Replace(localVarPath, "{"+"leaderboard_name"+"}", url.PathEscape(parameterToString(r.leaderboardName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetScoreRequest struct {
	ctx             context.Context
	ApiService      *LeaderboardsServiceApiService
	leaderboardName string
	userId          string
	token           *string
	body            *SetScoreRequest
}

// User session token
func (r ApiSetScoreRequest) Token(token string) ApiSetScoreRequest {
	r.token = &token
	return r
}

func (r ApiSetScoreRequest) Body(body SetScoreRequest) ApiSetScoreRequest {
	r.body = &body
	return r
}

func (r ApiSetScoreRequest) Execute() (*LeaderboardsSetScoreResponse, *http.Response, error) {
	return r.ApiService.SetScoreExecute(r)
}

/*
SetScore Update Scores

Updates the score on the leaderboard for the logged in user (only non 'counter' leaderboards)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param leaderboardName Name of the leaderboard
	@param userId User ID for the user who's score is being updated
	@return ApiSetScoreRequest
*/
func (a *LeaderboardsServiceApiService) SetScore(ctx context.Context, leaderboardName string, userId string) ApiSetScoreRequest {
	return ApiSetScoreRequest{
		ApiService:      a,
		ctx:             ctx,
		leaderboardName: leaderboardName,
		userId:          userId,
	}
}

// Execute executes the request
//
//	@return	LeaderboardsSetScoreResponse
func (a *LeaderboardsServiceApiService) SetScoreExecute(r ApiSetScoreRequest) (*LeaderboardsSetScoreResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LeaderboardsSetScoreResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LeaderboardsServiceApiService.SetScore")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/leaderboards/{leaderboard_name}/user/{user_id}/score"
	localVarPath = strings.Replace(localVarPath, "{"+"leaderboard_name"+"}", url.PathEscape(parameterToString(r.leaderboardName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Token"] = parameterToString(*r.token, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorsApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
