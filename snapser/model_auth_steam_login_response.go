/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// AuthSteamLoginResponse struct for AuthSteamLoginResponse
type AuthSteamLoginResponse struct {
	User *AuthUser `json:"user,omitempty"`
}

// NewAuthSteamLoginResponse instantiates a new AuthSteamLoginResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthSteamLoginResponse() *AuthSteamLoginResponse {
	this := AuthSteamLoginResponse{}
	return &this
}

// NewAuthSteamLoginResponseWithDefaults instantiates a new AuthSteamLoginResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthSteamLoginResponseWithDefaults() *AuthSteamLoginResponse {
	this := AuthSteamLoginResponse{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AuthSteamLoginResponse) GetUser() AuthUser {
	if o == nil || isNil(o.User) {
		var ret AuthUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSteamLoginResponse) GetUserOk() (*AuthUser, bool) {
	if o == nil || isNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AuthSteamLoginResponse) HasUser() bool {
	if o != nil && !isNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AuthUser and assigns it to the User field.
func (o *AuthSteamLoginResponse) SetUser(v AuthUser) {
	o.User = &v
}

func (o AuthSteamLoginResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.User) {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableAuthSteamLoginResponse struct {
	value *AuthSteamLoginResponse
	isSet bool
}

func (v NullableAuthSteamLoginResponse) Get() *AuthSteamLoginResponse {
	return v.value
}

func (v *NullableAuthSteamLoginResponse) Set(val *AuthSteamLoginResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthSteamLoginResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthSteamLoginResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthSteamLoginResponse(val *AuthSteamLoginResponse) *NullableAuthSteamLoginResponse {
	return &NullableAuthSteamLoginResponse{value: val, isSet: true}
}

func (v NullableAuthSteamLoginResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthSteamLoginResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
