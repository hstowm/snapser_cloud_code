/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// MatchmakingAssignment An Assignment represents a game server assignment associated with a Ticket.
type MatchmakingAssignment struct {
	Extensions *map[string]ProtobufAny `json:"extensions,omitempty"`
	// Connection information for this Assignment.
	MatchId *string `json:"match_id,omitempty"`
	// The match profile used to generate this match.
	MatchProfile *string  `json:"match_profile,omitempty"`
	TicketIds    []string `json:"ticket_ids,omitempty"`
}

// NewMatchmakingAssignment instantiates a new MatchmakingAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchmakingAssignment() *MatchmakingAssignment {
	this := MatchmakingAssignment{}
	return &this
}

// NewMatchmakingAssignmentWithDefaults instantiates a new MatchmakingAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchmakingAssignmentWithDefaults() *MatchmakingAssignment {
	this := MatchmakingAssignment{}
	return &this
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *MatchmakingAssignment) GetExtensions() map[string]ProtobufAny {
	if o == nil || isNil(o.Extensions) {
		var ret map[string]ProtobufAny
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingAssignment) GetExtensionsOk() (*map[string]ProtobufAny, bool) {
	if o == nil || isNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *MatchmakingAssignment) HasExtensions() bool {
	if o != nil && !isNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given map[string]ProtobufAny and assigns it to the Extensions field.
func (o *MatchmakingAssignment) SetExtensions(v map[string]ProtobufAny) {
	o.Extensions = &v
}

// GetMatchId returns the MatchId field value if set, zero value otherwise.
func (o *MatchmakingAssignment) GetMatchId() string {
	if o == nil || isNil(o.MatchId) {
		var ret string
		return ret
	}
	return *o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingAssignment) GetMatchIdOk() (*string, bool) {
	if o == nil || isNil(o.MatchId) {
		return nil, false
	}
	return o.MatchId, true
}

// HasMatchId returns a boolean if a field has been set.
func (o *MatchmakingAssignment) HasMatchId() bool {
	if o != nil && !isNil(o.MatchId) {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given string and assigns it to the MatchId field.
func (o *MatchmakingAssignment) SetMatchId(v string) {
	o.MatchId = &v
}

// GetMatchProfile returns the MatchProfile field value if set, zero value otherwise.
func (o *MatchmakingAssignment) GetMatchProfile() string {
	if o == nil || isNil(o.MatchProfile) {
		var ret string
		return ret
	}
	return *o.MatchProfile
}

// GetMatchProfileOk returns a tuple with the MatchProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingAssignment) GetMatchProfileOk() (*string, bool) {
	if o == nil || isNil(o.MatchProfile) {
		return nil, false
	}
	return o.MatchProfile, true
}

// HasMatchProfile returns a boolean if a field has been set.
func (o *MatchmakingAssignment) HasMatchProfile() bool {
	if o != nil && !isNil(o.MatchProfile) {
		return true
	}

	return false
}

// SetMatchProfile gets a reference to the given string and assigns it to the MatchProfile field.
func (o *MatchmakingAssignment) SetMatchProfile(v string) {
	o.MatchProfile = &v
}

// GetTicketIds returns the TicketIds field value if set, zero value otherwise.
func (o *MatchmakingAssignment) GetTicketIds() []string {
	if o == nil || isNil(o.TicketIds) {
		var ret []string
		return ret
	}
	return o.TicketIds
}

// GetTicketIdsOk returns a tuple with the TicketIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingAssignment) GetTicketIdsOk() ([]string, bool) {
	if o == nil || isNil(o.TicketIds) {
		return nil, false
	}
	return o.TicketIds, true
}

// HasTicketIds returns a boolean if a field has been set.
func (o *MatchmakingAssignment) HasTicketIds() bool {
	if o != nil && !isNil(o.TicketIds) {
		return true
	}

	return false
}

// SetTicketIds gets a reference to the given []string and assigns it to the TicketIds field.
func (o *MatchmakingAssignment) SetTicketIds(v []string) {
	o.TicketIds = v
}

func (o MatchmakingAssignment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !isNil(o.MatchId) {
		toSerialize["match_id"] = o.MatchId
	}
	if !isNil(o.MatchProfile) {
		toSerialize["match_profile"] = o.MatchProfile
	}
	if !isNil(o.TicketIds) {
		toSerialize["ticket_ids"] = o.TicketIds
	}
	return json.Marshal(toSerialize)
}

type NullableMatchmakingAssignment struct {
	value *MatchmakingAssignment
	isSet bool
}

func (v NullableMatchmakingAssignment) Get() *MatchmakingAssignment {
	return v.value
}

func (v *NullableMatchmakingAssignment) Set(val *MatchmakingAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchmakingAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchmakingAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchmakingAssignment(val *MatchmakingAssignment) *NullableMatchmakingAssignment {
	return &NullableMatchmakingAssignment{value: val, isSet: true}
}

func (v NullableMatchmakingAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchmakingAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
