/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// InventoryUserInventoryItem struct for InventoryUserInventoryItem
type InventoryUserInventoryItem struct {
	// Timestamp when player acquired the item
	AcquiredAt *int64 `json:"acquired_at,omitempty"`
	// name of catalog item
	CatalogItemName *string `json:"catalog_item_name,omitempty"`
	// Timestamp when the item will be removed from player inventory
	ExpiresAt *string `json:"expires_at,omitempty"`
	// Instance id of the inventory item
	InstanceId *string `json:"instance_id,omitempty"`
	// Metadata attached with instance of item in player's inventory. Not to be confused with metadata in catalog inventory item
	InstanceMetadata map[string]interface{} `json:"instance_metadata,omitempty"`
	// Timestamp when item was last consumed. In case of stackables, it is the timestamp of last consumed item of the stack
	LastConsumedAt *string `json:"last_consumed_at,omitempty"`
	// Count of times the item can been used
	RemainingUses *int32 `json:"remaining_uses,omitempty"`
}

// NewInventoryUserInventoryItem instantiates a new InventoryUserInventoryItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryUserInventoryItem() *InventoryUserInventoryItem {
	this := InventoryUserInventoryItem{}
	return &this
}

// NewInventoryUserInventoryItemWithDefaults instantiates a new InventoryUserInventoryItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryUserInventoryItemWithDefaults() *InventoryUserInventoryItem {
	this := InventoryUserInventoryItem{}
	return &this
}

// GetAcquiredAt returns the AcquiredAt field value if set, zero value otherwise.
func (o *InventoryUserInventoryItem) GetAcquiredAt() int64 {
	if o == nil || isNil(o.AcquiredAt) {
		var ret int64
		return ret
	}
	return *o.AcquiredAt
}

// GetAcquiredAtOk returns a tuple with the AcquiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUserInventoryItem) GetAcquiredAtOk() (*int64, bool) {
	if o == nil || isNil(o.AcquiredAt) {
		return nil, false
	}
	return o.AcquiredAt, true
}

// HasAcquiredAt returns a boolean if a field has been set.
func (o *InventoryUserInventoryItem) HasAcquiredAt() bool {
	if o != nil && !isNil(o.AcquiredAt) {
		return true
	}

	return false
}

// SetAcquiredAt gets a reference to the given int64 and assigns it to the AcquiredAt field.
func (o *InventoryUserInventoryItem) SetAcquiredAt(v int64) {
	o.AcquiredAt = &v
}

// GetCatalogItemName returns the CatalogItemName field value if set, zero value otherwise.
func (o *InventoryUserInventoryItem) GetCatalogItemName() string {
	if o == nil || isNil(o.CatalogItemName) {
		var ret string
		return ret
	}
	return *o.CatalogItemName
}

// GetCatalogItemNameOk returns a tuple with the CatalogItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUserInventoryItem) GetCatalogItemNameOk() (*string, bool) {
	if o == nil || isNil(o.CatalogItemName) {
		return nil, false
	}
	return o.CatalogItemName, true
}

// HasCatalogItemName returns a boolean if a field has been set.
func (o *InventoryUserInventoryItem) HasCatalogItemName() bool {
	if o != nil && !isNil(o.CatalogItemName) {
		return true
	}

	return false
}

// SetCatalogItemName gets a reference to the given string and assigns it to the CatalogItemName field.
func (o *InventoryUserInventoryItem) SetCatalogItemName(v string) {
	o.CatalogItemName = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *InventoryUserInventoryItem) GetExpiresAt() string {
	if o == nil || isNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUserInventoryItem) GetExpiresAtOk() (*string, bool) {
	if o == nil || isNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *InventoryUserInventoryItem) HasExpiresAt() bool {
	if o != nil && !isNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *InventoryUserInventoryItem) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *InventoryUserInventoryItem) GetInstanceId() string {
	if o == nil || isNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUserInventoryItem) GetInstanceIdOk() (*string, bool) {
	if o == nil || isNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *InventoryUserInventoryItem) HasInstanceId() bool {
	if o != nil && !isNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *InventoryUserInventoryItem) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetInstanceMetadata returns the InstanceMetadata field value if set, zero value otherwise.
func (o *InventoryUserInventoryItem) GetInstanceMetadata() map[string]interface{} {
	if o == nil || isNil(o.InstanceMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.InstanceMetadata
}

// GetInstanceMetadataOk returns a tuple with the InstanceMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUserInventoryItem) GetInstanceMetadataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.InstanceMetadata) {
		return map[string]interface{}{}, false
	}
	return o.InstanceMetadata, true
}

// HasInstanceMetadata returns a boolean if a field has been set.
func (o *InventoryUserInventoryItem) HasInstanceMetadata() bool {
	if o != nil && !isNil(o.InstanceMetadata) {
		return true
	}

	return false
}

// SetInstanceMetadata gets a reference to the given map[string]interface{} and assigns it to the InstanceMetadata field.
func (o *InventoryUserInventoryItem) SetInstanceMetadata(v map[string]interface{}) {
	o.InstanceMetadata = v
}

// GetLastConsumedAt returns the LastConsumedAt field value if set, zero value otherwise.
func (o *InventoryUserInventoryItem) GetLastConsumedAt() string {
	if o == nil || isNil(o.LastConsumedAt) {
		var ret string
		return ret
	}
	return *o.LastConsumedAt
}

// GetLastConsumedAtOk returns a tuple with the LastConsumedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUserInventoryItem) GetLastConsumedAtOk() (*string, bool) {
	if o == nil || isNil(o.LastConsumedAt) {
		return nil, false
	}
	return o.LastConsumedAt, true
}

// HasLastConsumedAt returns a boolean if a field has been set.
func (o *InventoryUserInventoryItem) HasLastConsumedAt() bool {
	if o != nil && !isNil(o.LastConsumedAt) {
		return true
	}

	return false
}

// SetLastConsumedAt gets a reference to the given string and assigns it to the LastConsumedAt field.
func (o *InventoryUserInventoryItem) SetLastConsumedAt(v string) {
	o.LastConsumedAt = &v
}

// GetRemainingUses returns the RemainingUses field value if set, zero value otherwise.
func (o *InventoryUserInventoryItem) GetRemainingUses() int32 {
	if o == nil || isNil(o.RemainingUses) {
		var ret int32
		return ret
	}
	return *o.RemainingUses
}

// GetRemainingUsesOk returns a tuple with the RemainingUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryUserInventoryItem) GetRemainingUsesOk() (*int32, bool) {
	if o == nil || isNil(o.RemainingUses) {
		return nil, false
	}
	return o.RemainingUses, true
}

// HasRemainingUses returns a boolean if a field has been set.
func (o *InventoryUserInventoryItem) HasRemainingUses() bool {
	if o != nil && !isNil(o.RemainingUses) {
		return true
	}

	return false
}

// SetRemainingUses gets a reference to the given int32 and assigns it to the RemainingUses field.
func (o *InventoryUserInventoryItem) SetRemainingUses(v int32) {
	o.RemainingUses = &v
}

func (o InventoryUserInventoryItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AcquiredAt) {
		toSerialize["acquired_at"] = o.AcquiredAt
	}
	if !isNil(o.CatalogItemName) {
		toSerialize["catalog_item_name"] = o.CatalogItemName
	}
	if !isNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !isNil(o.InstanceId) {
		toSerialize["instance_id"] = o.InstanceId
	}
	if !isNil(o.InstanceMetadata) {
		toSerialize["instance_metadata"] = o.InstanceMetadata
	}
	if !isNil(o.LastConsumedAt) {
		toSerialize["last_consumed_at"] = o.LastConsumedAt
	}
	if !isNil(o.RemainingUses) {
		toSerialize["remaining_uses"] = o.RemainingUses
	}
	return json.Marshal(toSerialize)
}

type NullableInventoryUserInventoryItem struct {
	value *InventoryUserInventoryItem
	isSet bool
}

func (v NullableInventoryUserInventoryItem) Get() *InventoryUserInventoryItem {
	return v.value
}

func (v *NullableInventoryUserInventoryItem) Set(val *InventoryUserInventoryItem) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryUserInventoryItem) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryUserInventoryItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryUserInventoryItem(val *InventoryUserInventoryItem) *NullableInventoryUserInventoryItem {
	return &NullableInventoryUserInventoryItem{value: val, isSet: true}
}

func (v NullableInventoryUserInventoryItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryUserInventoryItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
