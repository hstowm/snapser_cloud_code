/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// MatchmakingSearchFields Search fields are the fields which can be used when specifying filters.
type MatchmakingSearchFields struct {
	// A map of double args and their values to be used by the matchmaker
	DoubleArgs *map[string]float64 `json:"double_args,omitempty"`
	// A map of string args and their values to be used by the matchmaker
	StringArgs *map[string]string `json:"string_args,omitempty"`
	// An array of string tags to be used by the matchmaker
	Tags []string `json:"tags,omitempty"`
}

// NewMatchmakingSearchFields instantiates a new MatchmakingSearchFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchmakingSearchFields() *MatchmakingSearchFields {
	this := MatchmakingSearchFields{}
	return &this
}

// NewMatchmakingSearchFieldsWithDefaults instantiates a new MatchmakingSearchFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchmakingSearchFieldsWithDefaults() *MatchmakingSearchFields {
	this := MatchmakingSearchFields{}
	return &this
}

// GetDoubleArgs returns the DoubleArgs field value if set, zero value otherwise.
func (o *MatchmakingSearchFields) GetDoubleArgs() map[string]float64 {
	if o == nil || isNil(o.DoubleArgs) {
		var ret map[string]float64
		return ret
	}
	return *o.DoubleArgs
}

// GetDoubleArgsOk returns a tuple with the DoubleArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingSearchFields) GetDoubleArgsOk() (*map[string]float64, bool) {
	if o == nil || isNil(o.DoubleArgs) {
		return nil, false
	}
	return o.DoubleArgs, true
}

// HasDoubleArgs returns a boolean if a field has been set.
func (o *MatchmakingSearchFields) HasDoubleArgs() bool {
	if o != nil && !isNil(o.DoubleArgs) {
		return true
	}

	return false
}

// SetDoubleArgs gets a reference to the given map[string]float64 and assigns it to the DoubleArgs field.
func (o *MatchmakingSearchFields) SetDoubleArgs(v map[string]float64) {
	o.DoubleArgs = &v
}

// GetStringArgs returns the StringArgs field value if set, zero value otherwise.
func (o *MatchmakingSearchFields) GetStringArgs() map[string]string {
	if o == nil || isNil(o.StringArgs) {
		var ret map[string]string
		return ret
	}
	return *o.StringArgs
}

// GetStringArgsOk returns a tuple with the StringArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingSearchFields) GetStringArgsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.StringArgs) {
		return nil, false
	}
	return o.StringArgs, true
}

// HasStringArgs returns a boolean if a field has been set.
func (o *MatchmakingSearchFields) HasStringArgs() bool {
	if o != nil && !isNil(o.StringArgs) {
		return true
	}

	return false
}

// SetStringArgs gets a reference to the given map[string]string and assigns it to the StringArgs field.
func (o *MatchmakingSearchFields) SetStringArgs(v map[string]string) {
	o.StringArgs = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *MatchmakingSearchFields) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingSearchFields) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MatchmakingSearchFields) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *MatchmakingSearchFields) SetTags(v []string) {
	o.Tags = v
}

func (o MatchmakingSearchFields) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DoubleArgs) {
		toSerialize["double_args"] = o.DoubleArgs
	}
	if !isNil(o.StringArgs) {
		toSerialize["string_args"] = o.StringArgs
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableMatchmakingSearchFields struct {
	value *MatchmakingSearchFields
	isSet bool
}

func (v NullableMatchmakingSearchFields) Get() *MatchmakingSearchFields {
	return v.value
}

func (v *NullableMatchmakingSearchFields) Set(val *MatchmakingSearchFields) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchmakingSearchFields) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchmakingSearchFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchmakingSearchFields(val *MatchmakingSearchFields) *NullableMatchmakingSearchFields {
	return &NullableMatchmakingSearchFields{value: val, isSet: true}
}

func (v NullableMatchmakingSearchFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchmakingSearchFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
