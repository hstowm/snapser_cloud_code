/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// MatchmakingTicket struct for MatchmakingTicket
type MatchmakingTicket struct {
	Assignment *MatchmakingAssignment  `json:"assignment,omitempty"`
	Extensions *map[string]ProtobufAny `json:"extensions,omitempty"`
	// The ID of the ticket.
	Id           *string                  `json:"id,omitempty"`
	SearchFields *MatchmakingSearchFields `json:"search_fields,omitempty"`
	UserId       *string                  `json:"user_id,omitempty"`
}

// NewMatchmakingTicket instantiates a new MatchmakingTicket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchmakingTicket() *MatchmakingTicket {
	this := MatchmakingTicket{}
	return &this
}

// NewMatchmakingTicketWithDefaults instantiates a new MatchmakingTicket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchmakingTicketWithDefaults() *MatchmakingTicket {
	this := MatchmakingTicket{}
	return &this
}

// GetAssignment returns the Assignment field value if set, zero value otherwise.
func (o *MatchmakingTicket) GetAssignment() MatchmakingAssignment {
	if o == nil || isNil(o.Assignment) {
		var ret MatchmakingAssignment
		return ret
	}
	return *o.Assignment
}

// GetAssignmentOk returns a tuple with the Assignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingTicket) GetAssignmentOk() (*MatchmakingAssignment, bool) {
	if o == nil || isNil(o.Assignment) {
		return nil, false
	}
	return o.Assignment, true
}

// HasAssignment returns a boolean if a field has been set.
func (o *MatchmakingTicket) HasAssignment() bool {
	if o != nil && !isNil(o.Assignment) {
		return true
	}

	return false
}

// SetAssignment gets a reference to the given MatchmakingAssignment and assigns it to the Assignment field.
func (o *MatchmakingTicket) SetAssignment(v MatchmakingAssignment) {
	o.Assignment = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *MatchmakingTicket) GetExtensions() map[string]ProtobufAny {
	if o == nil || isNil(o.Extensions) {
		var ret map[string]ProtobufAny
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingTicket) GetExtensionsOk() (*map[string]ProtobufAny, bool) {
	if o == nil || isNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *MatchmakingTicket) HasExtensions() bool {
	if o != nil && !isNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given map[string]ProtobufAny and assigns it to the Extensions field.
func (o *MatchmakingTicket) SetExtensions(v map[string]ProtobufAny) {
	o.Extensions = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MatchmakingTicket) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingTicket) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MatchmakingTicket) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MatchmakingTicket) SetId(v string) {
	o.Id = &v
}

// GetSearchFields returns the SearchFields field value if set, zero value otherwise.
func (o *MatchmakingTicket) GetSearchFields() MatchmakingSearchFields {
	if o == nil || isNil(o.SearchFields) {
		var ret MatchmakingSearchFields
		return ret
	}
	return *o.SearchFields
}

// GetSearchFieldsOk returns a tuple with the SearchFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingTicket) GetSearchFieldsOk() (*MatchmakingSearchFields, bool) {
	if o == nil || isNil(o.SearchFields) {
		return nil, false
	}
	return o.SearchFields, true
}

// HasSearchFields returns a boolean if a field has been set.
func (o *MatchmakingTicket) HasSearchFields() bool {
	if o != nil && !isNil(o.SearchFields) {
		return true
	}

	return false
}

// SetSearchFields gets a reference to the given MatchmakingSearchFields and assigns it to the SearchFields field.
func (o *MatchmakingTicket) SetSearchFields(v MatchmakingSearchFields) {
	o.SearchFields = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *MatchmakingTicket) GetUserId() string {
	if o == nil || isNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchmakingTicket) GetUserIdOk() (*string, bool) {
	if o == nil || isNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *MatchmakingTicket) HasUserId() bool {
	if o != nil && !isNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *MatchmakingTicket) SetUserId(v string) {
	o.UserId = &v
}

func (o MatchmakingTicket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Assignment) {
		toSerialize["assignment"] = o.Assignment
	}
	if !isNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.SearchFields) {
		toSerialize["search_fields"] = o.SearchFields
	}
	if !isNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableMatchmakingTicket struct {
	value *MatchmakingTicket
	isSet bool
}

func (v NullableMatchmakingTicket) Get() *MatchmakingTicket {
	return v.value
}

func (v *NullableMatchmakingTicket) Set(val *MatchmakingTicket) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchmakingTicket) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchmakingTicket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchmakingTicket(val *MatchmakingTicket) *NullableMatchmakingTicket {
	return &NullableMatchmakingTicket{value: val, isSet: true}
}

func (v NullableMatchmakingTicket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchmakingTicket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
