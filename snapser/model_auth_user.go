/*
Roi_dev

Your custom SDK

API version: Roi_dev: v9 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapser

import (
	"encoding/json"
)

// AuthUser struct for AuthUser
type AuthUser struct {
	// Whether user was created or not
	Created *bool `json:"created,omitempty"`
	// Unix timestamp of when the user was created
	CreatedAt *int64 `json:"created_at,omitempty"`
	// User ID for the user
	Id *string `json:"id,omitempty"`
	// Whether user is banned or not
	IsBanned *bool `json:"is_banned,omitempty"`
	// Whether user is verified or not
	IsVerified *bool `json:"is_verified,omitempty"`
	// Unix timestamp of when the session was last refreshed (If applicable)
	RefreshedAt *int64 `json:"refreshed_at,omitempty"`
	// Session token of the user (If applicable)
	SessionToken *string `json:"session_token,omitempty"`
	// Different tags attached to the user like flagged
	Tags []string `json:"tags,omitempty"`
	// Validity of the token in seconds (If applicable)
	TokenValiditySeconds *int64 `json:"token_validity_seconds,omitempty"`
}

// NewAuthUser instantiates a new AuthUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthUser() *AuthUser {
	this := AuthUser{}
	return &this
}

// NewAuthUserWithDefaults instantiates a new AuthUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthUserWithDefaults() *AuthUser {
	this := AuthUser{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *AuthUser) GetCreated() bool {
	if o == nil || isNil(o.Created) {
		var ret bool
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUser) GetCreatedOk() (*bool, bool) {
	if o == nil || isNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *AuthUser) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given bool and assigns it to the Created field.
func (o *AuthUser) SetCreated(v bool) {
	o.Created = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AuthUser) GetCreatedAt() int64 {
	if o == nil || isNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUser) GetCreatedAtOk() (*int64, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AuthUser) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *AuthUser) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthUser) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUser) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthUser) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuthUser) SetId(v string) {
	o.Id = &v
}

// GetIsBanned returns the IsBanned field value if set, zero value otherwise.
func (o *AuthUser) GetIsBanned() bool {
	if o == nil || isNil(o.IsBanned) {
		var ret bool
		return ret
	}
	return *o.IsBanned
}

// GetIsBannedOk returns a tuple with the IsBanned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUser) GetIsBannedOk() (*bool, bool) {
	if o == nil || isNil(o.IsBanned) {
		return nil, false
	}
	return o.IsBanned, true
}

// HasIsBanned returns a boolean if a field has been set.
func (o *AuthUser) HasIsBanned() bool {
	if o != nil && !isNil(o.IsBanned) {
		return true
	}

	return false
}

// SetIsBanned gets a reference to the given bool and assigns it to the IsBanned field.
func (o *AuthUser) SetIsBanned(v bool) {
	o.IsBanned = &v
}

// GetIsVerified returns the IsVerified field value if set, zero value otherwise.
func (o *AuthUser) GetIsVerified() bool {
	if o == nil || isNil(o.IsVerified) {
		var ret bool
		return ret
	}
	return *o.IsVerified
}

// GetIsVerifiedOk returns a tuple with the IsVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUser) GetIsVerifiedOk() (*bool, bool) {
	if o == nil || isNil(o.IsVerified) {
		return nil, false
	}
	return o.IsVerified, true
}

// HasIsVerified returns a boolean if a field has been set.
func (o *AuthUser) HasIsVerified() bool {
	if o != nil && !isNil(o.IsVerified) {
		return true
	}

	return false
}

// SetIsVerified gets a reference to the given bool and assigns it to the IsVerified field.
func (o *AuthUser) SetIsVerified(v bool) {
	o.IsVerified = &v
}

// GetRefreshedAt returns the RefreshedAt field value if set, zero value otherwise.
func (o *AuthUser) GetRefreshedAt() int64 {
	if o == nil || isNil(o.RefreshedAt) {
		var ret int64
		return ret
	}
	return *o.RefreshedAt
}

// GetRefreshedAtOk returns a tuple with the RefreshedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUser) GetRefreshedAtOk() (*int64, bool) {
	if o == nil || isNil(o.RefreshedAt) {
		return nil, false
	}
	return o.RefreshedAt, true
}

// HasRefreshedAt returns a boolean if a field has been set.
func (o *AuthUser) HasRefreshedAt() bool {
	if o != nil && !isNil(o.RefreshedAt) {
		return true
	}

	return false
}

// SetRefreshedAt gets a reference to the given int64 and assigns it to the RefreshedAt field.
func (o *AuthUser) SetRefreshedAt(v int64) {
	o.RefreshedAt = &v
}

// GetSessionToken returns the SessionToken field value if set, zero value otherwise.
func (o *AuthUser) GetSessionToken() string {
	if o == nil || isNil(o.SessionToken) {
		var ret string
		return ret
	}
	return *o.SessionToken
}

// GetSessionTokenOk returns a tuple with the SessionToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUser) GetSessionTokenOk() (*string, bool) {
	if o == nil || isNil(o.SessionToken) {
		return nil, false
	}
	return o.SessionToken, true
}

// HasSessionToken returns a boolean if a field has been set.
func (o *AuthUser) HasSessionToken() bool {
	if o != nil && !isNil(o.SessionToken) {
		return true
	}

	return false
}

// SetSessionToken gets a reference to the given string and assigns it to the SessionToken field.
func (o *AuthUser) SetSessionToken(v string) {
	o.SessionToken = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AuthUser) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUser) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AuthUser) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *AuthUser) SetTags(v []string) {
	o.Tags = v
}

// GetTokenValiditySeconds returns the TokenValiditySeconds field value if set, zero value otherwise.
func (o *AuthUser) GetTokenValiditySeconds() int64 {
	if o == nil || isNil(o.TokenValiditySeconds) {
		var ret int64
		return ret
	}
	return *o.TokenValiditySeconds
}

// GetTokenValiditySecondsOk returns a tuple with the TokenValiditySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUser) GetTokenValiditySecondsOk() (*int64, bool) {
	if o == nil || isNil(o.TokenValiditySeconds) {
		return nil, false
	}
	return o.TokenValiditySeconds, true
}

// HasTokenValiditySeconds returns a boolean if a field has been set.
func (o *AuthUser) HasTokenValiditySeconds() bool {
	if o != nil && !isNil(o.TokenValiditySeconds) {
		return true
	}

	return false
}

// SetTokenValiditySeconds gets a reference to the given int64 and assigns it to the TokenValiditySeconds field.
func (o *AuthUser) SetTokenValiditySeconds(v int64) {
	o.TokenValiditySeconds = &v
}

func (o AuthUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.IsBanned) {
		toSerialize["is_banned"] = o.IsBanned
	}
	if !isNil(o.IsVerified) {
		toSerialize["is_verified"] = o.IsVerified
	}
	if !isNil(o.RefreshedAt) {
		toSerialize["refreshed_at"] = o.RefreshedAt
	}
	if !isNil(o.SessionToken) {
		toSerialize["session_token"] = o.SessionToken
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.TokenValiditySeconds) {
		toSerialize["token_validity_seconds"] = o.TokenValiditySeconds
	}
	return json.Marshal(toSerialize)
}

type NullableAuthUser struct {
	value *AuthUser
	isSet bool
}

func (v NullableAuthUser) Get() *AuthUser {
	return v.value
}

func (v *NullableAuthUser) Set(val *AuthUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthUser(val *AuthUser) *NullableAuthUser {
	return &NullableAuthUser{value: val, isSet: true}
}

func (v NullableAuthUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
