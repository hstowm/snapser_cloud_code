openapi: 3.0.1
info:
  description: Your custom SDK
  title: Roi_dev
  version: "Roi_dev: v9 SDK"
servers:
- url: https://gateway.snapser.com/u5y0kzjh
tags:
- name: AuthService
- name: InventoryService
- name: LeaderboardsService
- name: MatchmakingService
- name: ProfilesService
- name: RemoteConfigService
- name: StatisticsService
- name: StorageService
paths:
  /v1/auth/associate-logins:
    put:
      description: Associates two logins based on their session tokens
      operationId: AssociateLogins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authAssociateLoginsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Associate Multiple Logins
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/login/anon:
    put:
      description: Logs in the user with an arbitrary identifier specified and returns
        a session
      operationId: AnonLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authAnonLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authAnonLoginResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Anonymous Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/login/apple:
    put:
      description: Logs in the user based on the apple credential token specified
        and returns a session
      operationId: AppleLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authAppleLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authAppleLoginResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Apple Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/login/email:
    put:
      description: Logs in the user based on the email and OTP specified and returns
        a session
      operationId: EmailLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authEmailLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authEmailLoginResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Email Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/login/epic:
    put:
      description: Logs in the user based on the epic credentials specified and returns
        a session
      operationId: EpicLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authEpicLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authEpicLoginResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Epic Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/login/facebook:
    put:
      description: Logs in the user based on the facebook credential token specified
        and returns a session
      operationId: FacebookLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authFacebookLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authFacebookLoginResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Facebook Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/login/google:
    put:
      description: Logs in the user based on the google credential token specified
        and returns a session
      operationId: GoogleLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authGoogleLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authGoogleLoginResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Google Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/login/steam:
    put:
      description: Logs in the user based on the steam token specified and returns
        a session
      operationId: SteamLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authSteamLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authSteamLoginResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Steam Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/login/xbox:
    put:
      description: Logs in the user based on the xbox token specified and returns
        a session
      operationId: XboxLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authXboxLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authXboxLoginResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Xbox Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/logout/{token}:
    delete:
      description: Ends the current session of the user
      operationId: Logout
      parameters:
      - description: Session token to logout
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      - description: Logged in user's session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Logout User
      tags:
      - AuthService
  /v1/auth/otp:
    post:
      description: Generates an OTP and sends it to the email for logging in
      operationId: Otp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authOtpRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Generate One Time Password
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/refresh:
    patch:
      description: Refreshes the session and returns a new session token with refreshed
        validity
      operationId: Refresh
      parameters:
      - description: Logged in user's session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authRefreshRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authRefreshResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Refresh Session Token
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/user/{id}:
    delete:
      description: Deletes the user based on the user ID
      operationId: DeleteUser
      parameters:
      - description: UserID of the user to be deleted
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Logged in user's session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Delete User
      tags:
      - AuthService
  /v1/auth/validate:
    post:
      description: Validates the session of the user and returns the user info
      operationId: Validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authValidateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authValidateResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Validate Session Token
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/inventory/user/{user_id}/currencies:
    get:
      description: Get user currencies
      operationId: GetUserCurrencies
      parameters:
      - description: User id
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventoryGetUserCurrenciesResponse'
          description: A successful response.
      summary: Get User Currencies
      tags:
      - InventoryService
  /v1/inventory/user/{user_id}/currencies/{currency_name}:
    patch:
      description: Add virtual currency to user
      operationId: UpdateUserVirtualCurrency
      parameters:
      - description: Id of affected user
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Name of currency to be granted
        explode: false
        in: path
        name: currency_name
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserVirtualCurrency_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventoryUpdateUserVirtualCurrencyResponse'
          description: A successful response.
      summary: Add Virtual Currency
      tags:
      - InventoryService
      x-codegen-request-body-name: body
  /v1/inventory/users/{user_id}/items:
    get:
      description: Gets items from inventory in pages. Default page size is x
      operationId: GetAllUserItems
      parameters:
      - description: userid to assign the items
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: "limit, max number of items in the response, defaults to x"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "offset, defaults to zero"
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: filter items by catalog_item_name
        explode: true
        in: query
        name: catalog_item_name
        required: false
        schema:
          type: string
        style: form
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventoryGetUserItemsResponse'
          description: A successful response.
      summary: Get Items
      tags:
      - InventoryService
  /v1/inventory/users/{user_id}/items/grant:
    post:
      description: "Grants the list of items to user, this does not modify currencies"
      operationId: GrantItemsToUser
      parameters:
      - description: Id of user receiving the assets
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantItemsToUser_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventoryUserInventory'
          description: A successful response.
      summary: Grant Item
      tags:
      - InventoryService
      x-codegen-request-body-name: body
  /v1/inventory/users/{user_id}/items/purchase:
    post:
      description: Purchase an item with given virtual currency
      operationId: PurchaseItemWithVirtualCurrency
      parameters:
      - description: Id of user receiving the assets
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseItemWithVirtualCurrency_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventoryUserInventoryItem'
          description: A successful response.
      summary: Purchase Item with Virtual Currency
      tags:
      - InventoryService
      x-codegen-request-body-name: body
  /v1/inventory/users/{user_id}/items/{instance_id}:
    delete:
      description: Deletes item from user inventory given instance id
      operationId: DeleteUserItem
      parameters:
      - description: Id of user from which item would be removed
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the item present in user inventory
        explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: User Inventory Item
      tags:
      - InventoryService
    get:
      description: Gets item from inventory given instance id
      operationId: GetUserItem
      parameters:
      - description: Id of affected user
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the item present in user inventory
        explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventoryUserInventoryItem'
          description: A successful response.
      summary: User Inventory Item
      tags:
      - InventoryService
    patch:
      description: Update the metadata of the user inventory item. Not to be confused
        with catalog item metadata
      operationId: UpdateUserItemMetadata
      parameters:
      - description: Id of affected user
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the item present in user inventory
        explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserItemMetadata_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventoryUserInventoryItem'
          description: A successful response.
      summary: User Inventory Item
      tags:
      - InventoryService
      x-codegen-request-body-name: body
  /v1/inventory/users/{user_id}/items/{instance_id}/consume:
    post:
      description: Consumes item from user inventory by a count given an instance
        id
      operationId: ConsumeItem
      parameters:
      - description: Id of affected user
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the item present in user inventory
        explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumeItem_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventoryConsumeItemResponse'
          description: A successful response.
      summary: Consume item from inventory
      tags:
      - InventoryService
      x-codegen-request-body-name: body
  /v1/inventory/users/{user_id}/items/{instance_id}/unlock:
    post:
      description: Unlocks a container item from user inventory given an instance
        id
      operationId: UnlockContainer
      parameters:
      - description: Id of affected user
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the container present in user inventory
        explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlockContainer_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventoryUnlockContainerResponse'
          description: A successful response.
      summary: Unlock Container
      tags:
      - InventoryService
      x-codegen-request-body-name: body
  /v1/leaderboards:
    get:
      description: Gets the standings within a leaderboard
      operationId: GetScores
      parameters:
      - description: Name of the leaderboard
        explode: true
        in: query
        name: leaderboard_name
        required: true
        schema:
          type: string
        style: form
      - description: Optional user ID for the user who's standing is requested
        explode: true
        in: query
        name: user_id
        required: false
        schema:
          type: string
        style: form
      - description: "Range of the leaderboard requested: 'top', 'bottom' or 'around'\
          \ the user specified"
        explode: true
        in: query
        name: range
        required: true
        schema:
          type: string
        style: form
      - description: Number of rankings to be displayed
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: "For recurring leaderboards, the offset from the latest occurrence\
          \ of the leaderboard"
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leaderboardsGetScoresResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Get Scores
      tags:
      - LeaderboardsService
  /v1/leaderboards/{leaderboard_name}/user/{user_id}/score:
    patch:
      description: Increments the score on the leaderboard for the logged in user
        (only 'counter' leaderboards)
      operationId: IncrementScore
      parameters:
      - description: Name of the leaderboard
        explode: false
        in: path
        name: leaderboard_name
        required: true
        schema:
          type: string
        style: simple
      - description: User ID for the user who's score is being updated
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncrementScore_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leaderboardsIncrementScoreResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Update Scores
      tags:
      - LeaderboardsService
      x-codegen-request-body-name: body
    put:
      description: Updates the score on the leaderboard for the logged in user (only
        non 'counter' leaderboards)
      operationId: SetScore
      parameters:
      - description: Name of the leaderboard
        explode: false
        in: path
        name: leaderboard_name
        required: true
        schema:
          type: string
        style: simple
      - description: User ID for the user who's score is being updated
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetScore_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leaderboardsSetScoreResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Update Scores
      tags:
      - LeaderboardsService
      x-codegen-request-body-name: body
  /v1/matchmaking/users/{user_id}/tickets:
    post:
      description: Create a ticket for a user
      operationId: CreateTicket
      parameters:
      - description: User ID for the user to be matched
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicket_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/matchmakingCreateTicketResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Create Ticket
      tags:
      - MatchmakingService
      x-codegen-request-body-name: body
  /v1/matchmaking/users/{user_id}/tickets/{id}:
    delete:
      description: Delete a user's ticket
      operationId: DeleteTicket
      parameters:
      - description: User ID for the user to be matched
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ticket ID to be deleted
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/matchmakingDeleteTicketResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Ticket APIs
      tags:
      - MatchmakingService
    get:
      description: Fetch a user's ticket
      operationId: GetTicket
      parameters:
      - description: User ID for the user to be matched
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ticket ID to be fetched
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/matchmakingGetTicketResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Ticket APIs
      tags:
      - MatchmakingService
  /v1/profiles/user/{user_id}:
    delete:
      description: Deletes a user's profile
      operationId: DeleteProfile
      parameters:
      - description: User ID of the user who's profile is being deleted
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: User Profile
      tags:
      - ProfilesService
    get:
      description: Retrieves a user's profile
      operationId: GetProfile
      parameters:
      - description: User ID of the user who's profile is being viewed
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profilesGetProfileResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: User Profile
      tags:
      - ProfilesService
    put:
      description: Insert or update a user's profile
      operationId: UpsertProfile
      parameters:
      - description: User ID of the user who's profile is being upserted
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertProfile_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: User Profile
      tags:
      - ProfilesService
      x-codegen-request-body-name: body
  /v1/remote-config/app-config/{version}:
    get:
      description: Returns the config for the app
      operationId: GetAppConfig
      parameters:
      - description: Version of the app
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remote_configGetAppConfigResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Get App Config
      tags:
      - RemoteConfigService
  /v1/remote-config/user-config/{user_id}:
    get:
      description: Returns the config for the user
      operationId: GetUserConfig
      parameters:
      - description: User ID of the user
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remote_configGetUserConfigResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Get User Config
      tags:
      - RemoteConfigService
  /v1/statistics/segments/{name}/users/{user_id}:
    get:
      description: Returns true/false if user is in segment or not
      operationId: IsUserInSegment
      parameters:
      - description: Name of the segment
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: User ID of the user
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statisticsIsUserInSegmentResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: User Segment Lookup
      tags:
      - StatisticsService
  /v1/statistics/settings/user-stats/{user_id}:
    get:
      description: Fetches all user-statistics for user or stat
      operationId: GetUserStatistics
      parameters:
      - description: User ID of the user
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statisticsGetUserStatisticsResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: User Statistics
      tags:
      - StatisticsService
  /v1/statistics/user-stats/{user_id}:
    put:
      description: Updates user statistics in bulk
      operationId: BatchUpdateUserStatistics
      parameters:
      - description: User ID of the user for whom the stats are being updated
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateUserStatistics_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statisticsBatchUpdateUserStatisticsResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: User Statistics Batch Update API
      tags:
      - StatisticsService
      x-codegen-request-body-name: body
  /v1/statistics/user-stats/{user_id}/{keys}:
    get:
      description: Fetches multiple user statistic by user id and stat key
      operationId: GetBulkUserStatistics
      parameters:
      - description: User ID of the user
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the user statistic
        explode: false
        in: path
        name: keys
        required: true
        schema:
          items:
            type: string
          minItems: 1
          type: array
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statisticsGetUserStatisticsResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: User Statistics
      tags:
      - StatisticsService
  /v1/statistics/user-stats/{user_id}/{key}:
    get:
      description: Fetches a specific user statistic by user id and stat key
      operationId: GetUserStatistic
      parameters:
      - description: User ID of the user
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the user statistic
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statisticsUserStatistic'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: User Statistic
      tags:
      - StatisticsService
    patch:
      description: Increments a user-statistic
      operationId: IncrementUserStatistic
      parameters:
      - description: User ID of the user who's stats are being requested
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the user statistic
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncrementUserStatistic_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statisticsUserStatistic'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: User Statistic
      tags:
      - StatisticsService
      x-codegen-request-body-name: body
    put:
      description: Sets a user statistic to exact value provided
      operationId: SetUserStatistic
      parameters:
      - description: User ID of the user who's stats are being requested
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the user statistic
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUserStatistic_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statisticsUserStatistic'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: User Statistic
      tags:
      - StatisticsService
      x-codegen-request-body-name: body
  /v1/storage/owner/{owner_id}/{access_type}/append-blobs/{key}:
    delete:
      description: Deletes the append blob
      operationId: DeleteAppendBlob
      parameters:
      - description: Append-blob owner's user ID
        explode: false
        in: path
        name: owner_id
        required: true
        schema:
          type: string
        style: simple
      - description: Access to the append-blob. (public/protected/private)
        explode: false
        in: path
        name: access_type
        required: true
        schema:
          type: string
        style: simple
      - description: Append-blob key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: Optional CAS value retrieved from the last operation. CAS mismatch
          will be ignored if not passed
        explode: true
        in: query
        name: cas
        required: false
        schema:
          type: string
        style: form
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageDeleteAppendBlobResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Append Blobs
      tags:
      - StorageService
    get:
      description: Retrieve the value of an append blob
      operationId: GetAppendBlob
      parameters:
      - description: Append-blob owner's user ID
        explode: false
        in: path
        name: owner_id
        required: true
        schema:
          type: string
        style: simple
      - description: Access to the append-blob. (public/protected/private)
        explode: false
        in: path
        name: access_type
        required: true
        schema:
          type: string
        style: simple
      - description: Append-blob key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageGetAppendBlobResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Append Blobs
      tags:
      - StorageService
    put:
      description: Apend to the existing blob. Create a new one if it doesn't exist
      operationId: UpdateAppendBlob
      parameters:
      - description: Append-blob owner's user ID
        explode: false
        in: path
        name: owner_id
        required: true
        schema:
          type: string
        style: simple
      - description: Access to the append-blob. (public/protected/private)
        explode: false
        in: path
        name: access_type
        required: true
        schema:
          type: string
        style: simple
      - description: Append-blob key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppendBlob_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageUpdateAppendBlobResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Append Blobs
      tags:
      - StorageService
      x-codegen-request-body-name: body
  /v1/storage/owner/{owner_id}/{access_type}/blobs/{key}:
    delete:
      description: Delete a blob
      operationId: DeleteBlob
      parameters:
      - description: Blob owner's user ID
        explode: false
        in: path
        name: owner_id
        required: true
        schema:
          type: string
        style: simple
      - description: Access to the blob. (public/protected/private)
        explode: false
        in: path
        name: access_type
        required: true
        schema:
          type: string
        style: simple
      - description: Blob key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: Optional CAS value retrieved from the last operation. CAS mismatch
          will be ignored if not passed
        explode: true
        in: query
        name: cas
        required: false
        schema:
          type: string
        style: form
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageDeleteBlobResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Blobs
      tags:
      - StorageService
    get:
      description: Retrieve the blob for the key
      operationId: GetBlob
      parameters:
      - description: Blob owner's user ID
        explode: false
        in: path
        name: owner_id
        required: true
        schema:
          type: string
        style: simple
      - description: Access to the blob. (public/protected/private)
        explode: false
        in: path
        name: access_type
        required: true
        schema:
          type: string
        style: simple
      - description: Blob key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageGetBlobResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Blobs
      tags:
      - StorageService
    post:
      description: Inserts a blob. Will fail if the key already exists
      operationId: InsertBlob
      parameters:
      - description: Blob owner's user ID
        explode: false
        in: path
        name: owner_id
        required: true
        schema:
          type: string
        style: simple
      - description: Access to the blob. (public/protected/private)
        explode: false
        in: path
        name: access_type
        required: true
        schema:
          type: string
        style: simple
      - description: Blob key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertBlob_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageInsertBlobResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Blobs
      tags:
      - StorageService
      x-codegen-request-body-name: body
    put:
      description: Replace a blob. Optionally insert if it doesn't exist
      operationId: ReplaceBlob
      parameters:
      - description: Blob owner's user ID
        explode: false
        in: path
        name: owner_id
        required: true
        schema:
          type: string
        style: simple
      - description: Access to the blob. (public/protected/private)
        explode: false
        in: path
        name: access_type
        required: true
        schema:
          type: string
        style: simple
      - description: Blob key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceBlob_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageReplaceBlobResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Blobs
      tags:
      - StorageService
      x-codegen-request-body-name: body
  /v1/storage/owner/{owner_id}/{access_type}/counters/{key}:
    delete:
      description: Reset a counter value to 0
      operationId: ResetCounter
      parameters:
      - description: Counter owner's user ID
        explode: false
        in: path
        name: owner_id
        required: true
        schema:
          type: string
        style: simple
      - description: Access to the counter. (public/protected/private)
        explode: false
        in: path
        name: access_type
        required: true
        schema:
          type: string
        style: simple
      - description: Counter key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageResetCounterResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Counters
      tags:
      - StorageService
    get:
      description: Retrieve a counter value
      operationId: GetCounter
      parameters:
      - description: Counter owner's user ID
        explode: false
        in: path
        name: owner_id
        required: true
        schema:
          type: string
        style: simple
      - description: Access to the counter. (public/protected/private)
        explode: false
        in: path
        name: access_type
        required: true
        schema:
          type: string
        style: simple
      - description: Counter key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageGetCounterResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Counters
      tags:
      - StorageService
    put:
      description: Increment the counter
      operationId: IncrementCounter
      parameters:
      - description: Counter owner's user ID
        explode: false
        in: path
        name: owner_id
        required: true
        schema:
          type: string
        style: simple
      - description: Access to the counter. (public/protected/private)
        explode: false
        in: path
        name: access_type
        required: true
        schema:
          type: string
        style: simple
      - description: Counter key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: User session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncrementCounter_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageIncrementCounterResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsApiError'
          description: Returned on error with details
      summary: Counters
      tags:
      - StorageService
      x-codegen-request-body-name: body
components:
  schemas:
    BatchUpdateUserStatistics_request:
      properties:
        data:
          description: Array of operations to be performed
          items:
            $ref: '#/components/schemas/statisticsBatchUpdateUserStatisticsItem'
          type: array
      required:
      - data
      type: object
    ConsumeItem_request:
      properties:
        consume_count:
          description: Number of units to consume
          format: int32
          type: integer
      type: object
    CreateTicket_request:
      properties:
        search_fields:
          $ref: '#/components/schemas/matchmakingSearchFields'
      type: object
    GrantItemsToUser_request:
      properties:
        items:
          additionalProperties:
            format: int32
            type: integer
          description: Unique name and count of items to grant to user
          type: object
        metadata:
          description: "Custom metadata to be attached to user inventory items, not\
            \ to be confused with catalog item metadata"
          type: object
      type: object
    IncrementCounter_request:
      properties:
        count:
          description: Value to increment the counter by. Use negative to decrement
          format: int32
          type: integer
      required:
      - count
      type: object
    IncrementScore_request:
      properties:
        delta:
          description: The delta of the score to increment
          format: double
          type: number
        tier_name:
          description: Name of the tier
          type: string
      required:
      - delta
      type: object
    IncrementUserStatistic_request:
      properties:
        delta:
          description: Value to increment the statistic by. Use negative to decrement
          format: int64
          type: integer
      required:
      - delta
      type: object
    InsertBlob_request:
      properties:
        ttl:
          description: Optional TTL for the blob
          format: int64
          type: integer
        value:
          description: Blob value to be inserted
          type: string
      required:
      - value
      type: object
    PurchaseItemWithVirtualCurrency_request:
      properties:
        catalog_item_name:
          description: Name of catalog item to purchase
          type: string
        currency_name:
          description: Name of virtual currency to purchase item with
          type: string
      type: object
    ReplaceBlob_request:
      properties:
        cas:
          description: CAS value retrieved from the last operation
          type: string
        create:
          description: Whether the blob should be created if it doesn't exist
          type: boolean
        ttl:
          description: Optional TTL for the blob
          format: int64
          type: integer
        value:
          description: Blob value to be inserted
          type: string
      required:
      - value
      type: object
    SetScore_request:
      properties:
        score:
          description: New score to be inserted
          format: double
          type: number
        tier_name:
          description: Name of the tier
          type: string
      required:
      - score
      type: object
    SetUserStatistic_request:
      properties:
        value:
          description: Value to set the statistic to
          type: string
      required:
      - value
      type: object
    UnlockContainer_request:
      properties:
        metadata:
          description: "Custom metadata to be attached to user inventory items, not\
            \ to be confused with catalog item metadata"
          type: object
      type: object
    UpdateAppendBlob_request:
      properties:
        value:
          description: Value to be appended
          type: string
      required:
      - value
      type: object
    UpdateUserItemMetadata_request:
      properties:
        metadata:
          description: Metadata to be attached to user inventory item. Not be confused
            with metadata with catalog item
          type: object
      type: object
    UpdateUserVirtualCurrency_request:
      properties:
        amount:
          description: Amount to grant
          format: int32
          type: integer
      type: object
    UpsertProfile_request:
      properties:
        profile:
          description: JSON representation of the profile being upserted
          type: object
      required:
      - profile
      type: object
    authAnonLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        username:
          description: User's login ID
          type: string
      required:
      - username
      type: object
    authAnonLoginResponse:
      example:
        user:
          session_token: session_token
          refreshed_at: 6
          token_validity_seconds: 1
          created: true
          created_at: 0
          id: id
          is_banned: true
          is_verified: true
          tags:
          - tags
          - tags
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authAppleLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        token:
          description: Apple token generated on the client
          type: string
      required:
      - token
      type: object
    authAppleLoginResponse:
      example:
        user:
          session_token: session_token
          refreshed_at: 6
          token_validity_seconds: 1
          created: true
          created_at: 0
          id: id
          is_banned: true
          is_verified: true
          tags:
          - tags
          - tags
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authAssociateLoginsRequest:
      properties:
        discard_user_token:
          description: Token of the user to discard
          type: string
        keep_user_token:
          description: Token of the user to keep
          type: string
      required:
      - discard_user_token
      - keep_user_token
      type: object
    authEmailLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        email:
          description: Email address used as login
          type: string
        otp:
          description: OTP code received by the user
          type: string
      required:
      - email
      - otp
      type: object
    authEmailLoginResponse:
      example:
        user:
          session_token: session_token
          refreshed_at: 6
          token_validity_seconds: 1
          created: true
          created_at: 0
          id: id
          is_banned: true
          is_verified: true
          tags:
          - tags
          - tags
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authEpicLoginRequest:
      properties:
        code:
          description: code generated on the client
          type: string
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        exchange_code:
          description: exchange_code generated on the client
          type: string
        grant_type:
          description: token generated on the client
          type: string
        password:
          description: exchange_code generated on the client
          type: string
        username:
          description: exchange_code generated on the client
          type: string
      required:
      - grant_type
      type: object
    authEpicLoginResponse:
      example:
        user:
          session_token: session_token
          refreshed_at: 6
          token_validity_seconds: 1
          created: true
          created_at: 0
          id: id
          is_banned: true
          is_verified: true
          tags:
          - tags
          - tags
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authFacebookLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        token:
          description: Facebook token generated on the client
          type: string
      required:
      - token
      type: object
    authFacebookLoginResponse:
      example:
        user:
          session_token: session_token
          refreshed_at: 6
          token_validity_seconds: 1
          created: true
          created_at: 0
          id: id
          is_banned: true
          is_verified: true
          tags:
          - tags
          - tags
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authGoogleLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        token:
          description: Google IDtoken generated on the client
          type: string
      required:
      - token
      type: object
    authGoogleLoginResponse:
      example:
        user:
          session_token: session_token
          refreshed_at: 6
          token_validity_seconds: 1
          created: true
          created_at: 0
          id: id
          is_banned: true
          is_verified: true
          tags:
          - tags
          - tags
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authOtpRequest:
      properties:
        email:
          description: Email address to send OTP to
          type: string
      required:
      - email
      type: object
    authRefreshRequest:
      properties:
        session_token:
          description: Session token to refresh
          type: string
      required:
      - session_token
      type: object
    authRefreshResponse:
      example:
        user:
          session_token: session_token
          refreshed_at: 6
          token_validity_seconds: 1
          created: true
          created_at: 0
          id: id
          is_banned: true
          is_verified: true
          tags:
          - tags
          - tags
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authSteamLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        openid_parameters:
          additionalProperties:
            type: string
          description: Key value pairs of the openid parameters
          type: object
      required:
      - openid_parameters
      type: object
    authSteamLoginResponse:
      example:
        user:
          session_token: session_token
          refreshed_at: 6
          token_validity_seconds: 1
          created: true
          created_at: 0
          id: id
          is_banned: true
          is_verified: true
          tags:
          - tags
          - tags
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authUser:
      example:
        session_token: session_token
        refreshed_at: 6
        token_validity_seconds: 1
        created: true
        created_at: 0
        id: id
        is_banned: true
        is_verified: true
        tags:
        - tags
        - tags
      properties:
        created:
          description: Whether user was created or not
          type: boolean
        created_at:
          description: Unix timestamp of when the user was created
          format: int64
          type: integer
        id:
          description: User ID for the user
          type: string
        is_banned:
          description: Whether user is banned or not
          type: boolean
        is_verified:
          description: Whether user is verified or not
          type: boolean
        refreshed_at:
          description: Unix timestamp of when the session was last refreshed (If applicable)
          format: int64
          type: integer
        session_token:
          description: Session token of the user (If applicable)
          type: string
        tags:
          description: Different tags attached to the user like flagged
          items:
            type: string
          type: array
        token_validity_seconds:
          description: Validity of the token in seconds (If applicable)
          format: int64
          type: integer
      type: object
    authValidateRequest:
      properties:
        session_token:
          description: Session token to validate
          type: string
      required:
      - session_token
      type: object
    authValidateResponse:
      example:
        user:
          session_token: session_token
          refreshed_at: 6
          token_validity_seconds: 1
          created: true
          created_at: 0
          id: id
          is_banned: true
          is_verified: true
          tags:
          - tags
          - tags
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authXboxLoginRequest:
      properties:
        code:
          description: code generated on the client
          type: string
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        redirect_url:
          description: redirect url for client
          type: string
      required:
      - code
      - redirect_url
      type: object
    authXboxLoginResponse:
      example:
        user:
          session_token: session_token
          refreshed_at: 6
          token_validity_seconds: 1
          created: true
          created_at: 0
          id: id
          is_banned: true
          is_verified: true
          tags:
          - tags
          - tags
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    errorsApiError:
      properties:
        api_error_code:
          description: API Error code
          format: int32
          type: integer
        details:
          description: Error details
          type: string
        message:
          description: Error message
          type: string
      type: object
    inventoryConsumeItemResponse:
      example:
        remaining_uses: 6
        instance_id: instance_id
        last_consumed_at: 0
      properties:
        instance_id:
          description: Id of the item present in user inventory
          type: string
        last_consumed_at:
          description: Timestamp of the last time the item was consumed
          format: int64
          type: integer
        remaining_uses:
          description: Number of remaining uses for the user inventory item
          format: int32
          type: integer
      type: object
    inventoryGetUserCurrenciesResponse:
      example:
        currencies:
          key: 0
      properties:
        currencies:
          additionalProperties:
            format: int32
            type: integer
          description: Map of currency name to balance
          type: object
      type: object
    inventoryGetUserItemsResponse:
      example:
        items:
        - remaining_uses: 6
          expires_at: expires_at
          instance_id: instance_id
          acquired_at: 0
          instance_metadata: "{}"
          last_consumed_at: last_consumed_at
          catalog_item_name: catalog_item_name
        - remaining_uses: 6
          expires_at: expires_at
          instance_id: instance_id
          acquired_at: 0
          instance_metadata: "{}"
          last_consumed_at: last_consumed_at
          catalog_item_name: catalog_item_name
      properties:
        items:
          description: Items in user inventory
          items:
            $ref: '#/components/schemas/inventoryUserInventoryItem'
          type: array
      type: object
    inventoryUnlockContainerResponse:
      example:
        granted_items:
        - remaining_uses: 6
          expires_at: expires_at
          instance_id: instance_id
          acquired_at: 0
          instance_metadata: "{}"
          last_consumed_at: last_consumed_at
          catalog_item_name: catalog_item_name
        - remaining_uses: 6
          expires_at: expires_at
          instance_id: instance_id
          acquired_at: 0
          instance_metadata: "{}"
          last_consumed_at: last_consumed_at
          catalog_item_name: catalog_item_name
        remaining_uses: 6
        granted_virtual_currency:
          key: 0
      properties:
        granted_items:
          description: Items granted to the user
          items:
            $ref: '#/components/schemas/inventoryUserInventoryItem'
          type: array
        granted_virtual_currency:
          additionalProperties:
            format: int32
            type: integer
          description: Virtual currency granted to the user
          type: object
        remaining_uses:
          description: Number of remaining uses for the user inventory item
          format: int32
          type: integer
      type: object
    inventoryUpdateUserVirtualCurrencyResponse:
      example:
        current_balance: 0
        previous_balance: 6
      properties:
        current_balance:
          description: Current Balance of given currency with user after adding
          format: int32
          type: integer
        previous_balance:
          description: Balance of given currency with user before adding
          format: int32
          type: integer
      type: object
    inventoryUserInventory:
      example:
        items:
        - remaining_uses: 6
          expires_at: expires_at
          instance_id: instance_id
          acquired_at: 0
          instance_metadata: "{}"
          last_consumed_at: last_consumed_at
          catalog_item_name: catalog_item_name
        - remaining_uses: 6
          expires_at: expires_at
          instance_id: instance_id
          acquired_at: 0
          instance_metadata: "{}"
          last_consumed_at: last_consumed_at
          catalog_item_name: catalog_item_name
      properties:
        items:
          items:
            $ref: '#/components/schemas/inventoryUserInventoryItem'
          type: array
      type: object
    inventoryUserInventoryItem:
      example:
        remaining_uses: 6
        expires_at: expires_at
        instance_id: instance_id
        acquired_at: 0
        instance_metadata: "{}"
        last_consumed_at: last_consumed_at
        catalog_item_name: catalog_item_name
      properties:
        acquired_at:
          description: Timestamp when player acquired the item
          format: int64
          type: integer
        catalog_item_name:
          description: name of catalog item
          type: string
        expires_at:
          description: Timestamp when the item will be removed from player inventory
          format: int64
          type: string
        instance_id:
          description: Instance id of the inventory item
          type: string
        instance_metadata:
          description: Metadata attached with instance of item in player's inventory.
            Not to be confused with metadata in catalog inventory item
          type: object
        last_consumed_at:
          description: "Timestamp when item was last consumed. In case of stackables,\
            \ it is the timestamp of last consumed item of the stack"
          format: int64
          type: string
        remaining_uses:
          description: Count of times the item can been used
          format: int32
          type: integer
      type: object
    leaderboardsGetScoresResponse:
      example:
        tier:
          name: name
          description: description
          bucket_size: bucket_size
        user_scores:
        - score: 6.027456183070403
          user_id: user_id
          rank: 0
        - score: 6.027456183070403
          user_id: user_id
          rank: 0
      properties:
        tier:
          $ref: '#/components/schemas/leaderboardsTier'
        user_scores:
          description: List of users in the order defined by the leaderboard
          items:
            $ref: '#/components/schemas/leaderboardsUserScore'
          type: array
      type: object
    leaderboardsIncrementScoreResponse:
      example:
        score: 6.027456183070403
        tier:
          name: name
          description: description
          bucket_size: bucket_size
        rank: 0.8008281904610115
      properties:
        rank:
          description: Latest rank to be returned
          format: int64
          type: number
        score:
          description: Incremented score to be returned
          format: double
          type: number
        tier:
          $ref: '#/components/schemas/leaderboardsTier'
      type: object
    leaderboardsSetScoreResponse:
      example:
        score: 0.8008281904610115
        tier:
          name: name
          description: description
          bucket_size: bucket_size
      properties:
        score:
          description: Latest score to be returned
          format: double
          type: number
        tier:
          $ref: '#/components/schemas/leaderboardsTier'
      type: object
    leaderboardsTier:
      example:
        name: name
        description: description
        bucket_size: bucket_size
      properties:
        bucket_size:
          format: uint64
          type: string
        description:
          type: string
        name:
          type: string
      type: object
    leaderboardsUserScore:
      example:
        score: 6.027456183070403
        user_id: user_id
        rank: 0
      properties:
        rank:
          description: User's rank starting with 1
          format: int64
          type: integer
        score:
          description: User's score
          format: double
          type: number
        user_id:
          description: User ID of the user
          type: string
      type: object
    matchmakingAssignment:
      description: An Assignment represents a game server assignment associated with
        a Ticket.
      example:
        extensions:
          key:
            '@type': '@type'
        match_profile: match_profile
        ticket_ids:
        - ticket_ids
        - ticket_ids
        match_id: match_id
      properties:
        extensions:
          additionalProperties:
            $ref: '#/components/schemas/protobufAny'
          title: Optional
          type: object
        match_id:
          description: Connection information for this Assignment.
          type: string
        match_profile:
          description: The match profile used to generate this match.
          type: string
        ticket_ids:
          items:
            type: string
          title: List of user IDs
          type: array
      type: object
    matchmakingCreateTicketResponse:
      example:
        ticket:
          extensions:
            key:
              '@type': '@type'
          search_fields:
            double_args:
              key: 0.8008281904610115
            string_args:
              key: string_args
            tags:
            - tags
            - tags
          user_id: user_id
          assignment:
            extensions:
              key:
                '@type': '@type'
            match_profile: match_profile
            ticket_ids:
            - ticket_ids
            - ticket_ids
            match_id: match_id
          id: id
      properties:
        ticket:
          $ref: '#/components/schemas/matchmakingTicket'
      type: object
    matchmakingDeleteTicketResponse:
      example:
        success: true
      properties:
        success:
          type: boolean
      type: object
    matchmakingGetTicketResponse:
      example:
        ticket:
          extensions:
            key:
              '@type': '@type'
          search_fields:
            double_args:
              key: 0.8008281904610115
            string_args:
              key: string_args
            tags:
            - tags
            - tags
          user_id: user_id
          assignment:
            extensions:
              key:
                '@type': '@type'
            match_profile: match_profile
            ticket_ids:
            - ticket_ids
            - ticket_ids
            match_id: match_id
          id: id
      properties:
        ticket:
          $ref: '#/components/schemas/matchmakingTicket'
      type: object
    matchmakingSearchFields:
      description: Search fields are the fields which can be used when specifying
        filters.
      example:
        double_args:
          key: 0.8008281904610115
        string_args:
          key: string_args
        tags:
        - tags
        - tags
      properties:
        double_args:
          additionalProperties:
            format: double
            type: number
          description: A map of double args and their values to be used by the matchmaker
          type: object
        string_args:
          additionalProperties:
            type: string
          description: A map of string args and their values to be used by the matchmaker
          type: object
        tags:
          description: An array of string tags to be used by the matchmaker
          items:
            type: string
          type: array
      type: object
    matchmakingTicket:
      example:
        extensions:
          key:
            '@type': '@type'
        search_fields:
          double_args:
            key: 0.8008281904610115
          string_args:
            key: string_args
          tags:
          - tags
          - tags
        user_id: user_id
        assignment:
          extensions:
            key:
              '@type': '@type'
          match_profile: match_profile
          ticket_ids:
          - ticket_ids
          - ticket_ids
          match_id: match_id
        id: id
      properties:
        assignment:
          $ref: '#/components/schemas/matchmakingAssignment'
        extensions:
          additionalProperties:
            $ref: '#/components/schemas/protobufAny'
          title: "Future: Extensions are used to add additional fields to the Ticket"
          type: object
        id:
          description: The ID of the ticket.
          type: string
        search_fields:
          $ref: '#/components/schemas/matchmakingSearchFields'
        user_id:
          type: string
      type: object
    profilesGetProfileResponse:
      example:
        profile: "{}"
      properties:
        profile:
          description: JSON representation of the user's profile visible to the logged
            in user
          type: object
      type: object
    protobufAny:
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      example:
        '@type': '@type'
      properties:
        '@type':
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
          type: string
      type: object
    protobufNullValue:
      default: NULL_VALUE
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
        `Value` type union.

        The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
      enum:
      - NULL_VALUE
      type: string
    remote_configGetAppConfigResponse:
      example:
        config: "{}"
      properties:
        config:
          description: Config for the app
          type: object
      type: object
    remote_configGetUserConfigResponse:
      example:
        config: "{}"
      properties:
        config:
          description: Config for the user
          type: object
      type: object
    statisticsBatchUpdateUserStatisticsItem:
      properties:
        idx:
          description: Index used to determine the order in which operations are executed
          format: int64
          type: integer
        key:
          description: Name of the user statistic
          type: string
        operation:
          description: Operation to be performed (increment / set)
          type: string
        value:
          description: Value that the statistic should be set to / incremented by
          type: string
      required:
      - idx
      - key
      - operation
      - value
      type: object
    statisticsBatchUpdateUserStatisticsResponse:
      example:
        user_statistics:
        - user_id: user_id
          value: value
          key: key
        - user_id: user_id
          value: value
          key: key
      properties:
        user_statistics:
          items:
            $ref: '#/components/schemas/statisticsUserStatistic'
          type: array
      type: object
    statisticsGetUserStatisticsResponse:
      example:
        user_statistics:
        - user_id: user_id
          value: value
          key: key
        - user_id: user_id
          value: value
          key: key
      properties:
        user_statistics:
          items:
            $ref: '#/components/schemas/statisticsUserStatistic'
          type: array
      type: object
    statisticsIsUserInSegmentResponse:
      example:
        userInSegment: true
      properties:
        userInSegment:
          type: boolean
      type: object
    statisticsUserStatistic:
      example:
        user_id: user_id
        value: value
        key: key
      properties:
        key:
          type: string
        user_id:
          type: string
        value:
          type: string
      type: object
    storageDeleteAppendBlobResponse:
      example:
        cas: cas
      properties:
        cas:
          description: CAS value used for future operations
          type: string
      type: object
    storageDeleteBlobResponse:
      example:
        cas: cas
      properties:
        cas:
          description: CAS value used for future operations
          type: string
      type: object
    storageGetAppendBlobResponse:
      example:
        cas: cas
        value: value
      properties:
        cas:
          description: CAS value used for future operations
          type: string
        value:
          description: Blob value
          type: string
      type: object
    storageGetBlobResponse:
      example:
        cas: cas
        value: value
      properties:
        cas:
          description: CAS value used for future operations
          type: string
        value:
          description: Blob value
          type: string
      type: object
    storageGetCounterResponse:
      example:
        count: 0
      properties:
        count:
          description: Value of the counter
          format: int32
          type: integer
      required:
      - count
      type: object
    storageIncrementCounterResponse:
      example:
        count: 0
      properties:
        count:
          description: Value of the counter
          format: int32
          type: integer
      required:
      - count
      type: object
    storageInsertBlobResponse:
      example:
        cas: cas
      properties:
        cas:
          description: CAS value used for future operations
          type: string
      type: object
    storageReplaceBlobResponse:
      example:
        cas: cas
      properties:
        cas:
          description: CAS value used for future operations
          type: string
      type: object
    storageResetCounterResponse:
      example:
        count: 0
      properties:
        count:
          description: Value of the counter
          format: int32
          type: integer
      required:
      - count
      type: object
    storageUpdateAppendBlobResponse:
      example:
        cas: cas
      properties:
        cas:
          description: CAS value used for future operations
          type: string
      type: object
x-original-swagger-version: "2.0"
